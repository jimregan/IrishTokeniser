/* The following code was generated by JFlex 1.4.3 on 05/10/16 20:58 */

/*
 * Copyright 2016 Trinity College, Dublin
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
package ie.tcd.slscs.tokeniser.ga;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 05/10/16 20:58 from the specification file
 * <tt>c:/msys32/home/Abair/IrishTokeniser/src/main/jflex/irish.jflex</tt>
 */
public final class IrishTokeniserImpl {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\53\1\53\25\0\1\37\1\34\1\54\1\34\2\0\1\34"+
    "\1\21\1\34\1\34\1\50\1\0\1\41\1\42\1\3\1\51\12\46"+
    "\1\52\1\36\1\57\1\47\1\60\1\31\1\105\1\71\1\65\1\1"+
    "\1\5\3\61\1\67\1\75\2\61\1\106\1\15\1\72\1\20\1\33"+
    "\1\61\1\22\1\23\1\27\1\25\1\61\1\61\1\61\2\61\1\30"+
    "\1\0\1\32\1\107\1\102\1\40\1\10\1\64\1\13\1\66\1\7"+
    "\1\77\1\4\1\14\1\11\1\35\1\104\1\12\1\17\1\70\1\2"+
    "\1\74\1\35\1\6\1\16\1\24\1\26\1\103\1\100\1\76\1\101"+
    "\1\35\1\34\1\0\1\34\1\34\42\0\1\34\1\0\1\56\2\0"+
    "\1\45\2\0\1\34\1\0\1\34\1\34\1\0\1\34\1\34\1\34"+
    "\1\34\1\34\1\34\1\0\1\34\1\0\1\34\1\0\1\34\1\34"+
    "\1\34\1\34\1\34\1\34\1\34\1\0\1\61\1\55\1\0\5\0"+
    "\1\61\3\0\1\61\5\0\1\61\3\0\1\34\2\0\1\61\6\0"+
    "\1\62\1\43\6\0\1\35\3\0\1\35\5\0\1\35\4\0\1\34"+
    "\1\0\1\63\66\0\1\34\41\0\1\45\76\0\1\34\u0147\0\1\34"+
    "\1\0\1\45\264\0\1\34\1\34\1\34\1\34\1\34\1\34\1\34"+
    "\1\34\1\34\1\34\1\34\1\34\1\34\1\34\1\34\1\34\1\34"+
    "\1\0\1\34\1\34\1\34\1\34\1\34\1\34\1\34\7\0\1\34"+
    "\1\34\1\34\1\34\1\34\1\34\1\34\1\34\1\34\1\34\1\34"+
    "\1\34\1\34\1\34\1\34\1\34\1\34\1\34\1\34\1\34\1\34"+
    "\1\34\1\34\1\34\1\34\7\0\1\34\u0116\0\1\34\u1b30\0\1\73"+
    "\6\0\1\34\1\0\1\34\3\0\1\34\11\0\1\34\23\0\1\34"+
    "\147\0\1\44\150\0\1\34\20\0\1\34\54\0\1\34\1\34\74\0"+
    "\1\34\1\34\1\34\1\34\1\34\1\34\1\34\1\34\1\34\17\0"+
    "\1\34\1\34\47\0\1\34\1\0\1\34\53\0\1\34\1\0\1\34"+
    "\3\0\1\34\10\0\1\34\1\0\1\34\3\0\1\34\4\0\1\34"+
    "\2\0\1\34\1\34\1\0\1\34\6\0\1\34\1\0\1\34\1\34"+
    "\11\0\1\34\23\0\1\34\27\0\1\34\1\34\2\0\1\34\1\34"+
    "\u01fa\0\1\34\1\34\1\34\1\34\1\34\1\34\1\34\1\34\1\34"+
    "\1\34\1\34\1\34\1\34\1\34\1\34\1\34\1\34\1\34\1\34"+
    "\1\34\u0142\0\1\34\5\0\1\34\3\0\1\34\223\0\1\34\1\34"+
    "\1\34\4\0\1\34\1\34\3\0\1\34\2\0\1\34\1\0\1\34"+
    "\1\34\255\0\1\34\3\0\1\34\205\0\1\34\2\0\1\34\u0192\0"+
    "\1\34\1\34\u01cf\0\1\34\1\34\1\34\u0658\0\1\34\uce9c\0\1\45"+
    "\2\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\13\1\1\2\6\1\2\2\1\1"+
    "\1\3\2\2\4\0\1\2\4\1\1\0\1\1\1\0"+
    "\2\1\3\0\1\1\1\4\1\1\1\0\2\1\1\4"+
    "\1\0\1\1\1\0\6\1\1\0\1\5\2\0\1\6"+
    "\2\1\1\0\1\1\20\0\2\1\2\0\1\5\2\0"+
    "\1\4\3\0\2\1\2\0\1\6\6\0\1\7\24\0"+
    "\1\1\1\10\1\11\4\0\1\1\1\0\1\5\21\0"+
    "\1\12\1\1\7\0\1\13\14\0\1\14\12\0\1\15"+
    "\1\0\1\15\6\0\1\14\6\0\1\15\4\0\1\14"+
    "\6\0\1\15\134\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[310];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\110\0\220\0\330\0\u0120\0\u0168\0\u01b0\0\u01f8"+
    "\0\u0240\0\u0288\0\u02d0\0\u0318\0\u0360\0\u03a8\0\u03f0\0\u0438"+
    "\0\u0480\0\u04c8\0\u0510\0\u0558\0\u05a0\0\u05e8\0\u0630\0\u0678"+
    "\0\u06c0\0\u0708\0\u0750\0\u0798\0\u07e0\0\u0828\0\u0870\0\u08b8"+
    "\0\u0900\0\u0948\0\u0990\0\u09d8\0\u0a20\0\u0a68\0\u0ab0\0\u0af8"+
    "\0\u0b40\0\u0b88\0\u0bd0\0\u0c18\0\u0c60\0\u0ca8\0\u0678\0\u0cf0"+
    "\0\u0d38\0\u0d80\0\u0dc8\0\u0e10\0\u0e58\0\u0ea0\0\u0ee8\0\u0f30"+
    "\0\u0f78\0\u0fc0\0\u1008\0\u1050\0\u1098\0\u10e0\0\u0678\0\u1128"+
    "\0\u1170\0\u11b8\0\u1200\0\u1248\0\u1290\0\u12d8\0\u1320\0\u1368"+
    "\0\u13b0\0\u13f8\0\u1440\0\u1488\0\u14d0\0\u1518\0\u1560\0\u15a8"+
    "\0\u15f0\0\u1638\0\u1680\0\u16c8\0\u1710\0\u1758\0\u17a0\0\u17e8"+
    "\0\u1830\0\u1878\0\u0bd0\0\u18c0\0\u1908\0\u1878\0\u1950\0\u1998"+
    "\0\u19e0\0\u1a28\0\u1a70\0\u1ab8\0\u1b00\0\u1b48\0\u1b48\0\u1b90"+
    "\0\u1bd8\0\u1c20\0\u1c68\0\u1cb0\0\u0678\0\u1cf8\0\u1d40\0\u1d88"+
    "\0\u1dd0\0\u1e18\0\u1e60\0\u1ea8\0\u1ef0\0\u1f38\0\u1f80\0\u1fc8"+
    "\0\u2010\0\u2058\0\u20a0\0\u20e8\0\u2130\0\u2178\0\u21c0\0\u2208"+
    "\0\u2250\0\u2298\0\u0678\0\u0678\0\u22e0\0\u2328\0\u2370\0\u23b8"+
    "\0\u2400\0\u2448\0\u18c0\0\u2490\0\u24d8\0\u2520\0\u2568\0\u25b0"+
    "\0\u25f8\0\u2640\0\u2688\0\u26d0\0\u2718\0\u2760\0\u27a8\0\u27f0"+
    "\0\u2838\0\u2880\0\u28c8\0\u2910\0\u0678\0\u2958\0\u29a0\0\u29e8"+
    "\0\u2a30\0\u2a78\0\u2ac0\0\u2b08\0\u2b50\0\u0678\0\u2b98\0\u2be0"+
    "\0\u2c28\0\u2c70\0\u2cb8\0\u2d00\0\u2d48\0\u2d90\0\u2dd8\0\u2e20"+
    "\0\u2e68\0\u2eb0\0\u2ef8\0\u2f40\0\u2f88\0\u2fd0\0\u3018\0\u3060"+
    "\0\u30a8\0\u30f0\0\u3138\0\u3180\0\u31c8\0\u3210\0\u3258\0\u2e68"+
    "\0\u32a0\0\u32e8\0\u3330\0\u3378\0\u33c0\0\u3408\0\u2490\0\u3450"+
    "\0\u3498\0\u34e0\0\u3528\0\u3570\0\u35b8\0\u3600\0\u3648\0\u3690"+
    "\0\u36d8\0\u3720\0\u3768\0\u37b0\0\u37f8\0\u3840\0\u3888\0\u38d0"+
    "\0\u3918\0\u3960\0\u39a8\0\u39f0\0\u3a38\0\u3a80\0\u3ac8\0\u3b10"+
    "\0\u3b58\0\u3ba0\0\u3be8\0\u3c30\0\u3c78\0\u3cc0\0\u3d08\0\u3d50"+
    "\0\u3d98\0\u3de0\0\u3e28\0\u3e70\0\u3eb8\0\u3f00\0\u3f48\0\u3f90"+
    "\0\u3fd8\0\u4020\0\u4068\0\u40b0\0\u40f8\0\u4140\0\u4188\0\u41d0"+
    "\0\u4218\0\u4260\0\u42a8\0\u42f0\0\u4338\0\u4380\0\u43c8\0\u4410"+
    "\0\u4458\0\u44a0\0\u44e8\0\u4530\0\u4578\0\u45c0\0\u4608\0\u4650"+
    "\0\u4698\0\u46e0\0\u4728\0\u4770\0\u47b8\0\u4800\0\u4848\0\u4890"+
    "\0\u48d8\0\u4920\0\u4968\0\u49b0\0\u49f8\0\u4a40\0\u4a88\0\u4ad0"+
    "\0\u4b18\0\u4b60\0\u4ba8\0\u4bf0\0\u4c38\0\u4c80\0\u4cc8\0\u4d10"+
    "\0\u4d58\0\u4da0\0\u4de8\0\u4e30\0\u4e78\0\u4ec0\0\u4f08\0\u4f50"+
    "\0\u4f98\0\u4fe0\0\u5028\0\u5070\0\u50b8\0\u5100\0\u5148\0\u5190"+
    "\0\u51d8\0\u5220\0\u5268\0\u52b0\0\u52f8\0\u5340";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[310];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\2\1\3\1\4\1\5\1\6\1\3\1\7"+
    "\1\10\1\11\1\12\1\3\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\2\30\1\31\1\30\1\3\1\30\1\32\1\33"+
    "\1\34\1\30\1\35\1\30\1\0\1\36\1\0\1\37"+
    "\2\30\1\0\1\30\1\40\1\0\1\41\1\30\3\3"+
    "\2\42\1\43\1\3\1\44\1\45\1\42\1\46\4\3"+
    "\1\47\1\3\1\0\2\3\1\0\1\3\1\50\1\0"+
    "\1\51\1\52\1\53\15\51\1\0\6\51\3\0\1\51"+
    "\1\0\1\51\10\0\1\36\12\0\12\51\1\0\6\51"+
    "\1\0\2\51\1\0\1\51\2\0\2\51\1\53\15\51"+
    "\1\0\6\51\3\0\1\51\1\0\1\51\10\0\1\36"+
    "\12\0\12\51\1\0\6\51\1\0\2\51\1\0\1\51"+
    "\4\0\1\54\5\0\1\55\77\0\1\56\1\51\1\53"+
    "\15\51\1\0\6\51\3\0\1\51\1\0\1\51\10\0"+
    "\1\36\12\0\12\51\1\0\6\51\1\0\2\51\1\0"+
    "\1\51\2\0\2\51\1\53\2\51\1\52\12\51\1\57"+
    "\6\51\3\0\1\51\1\0\1\51\10\0\1\36\12\0"+
    "\6\51\1\60\3\51\1\57\6\51\1\0\2\51\1\0"+
    "\1\51\2\0\2\51\1\61\4\51\1\62\10\51\1\0"+
    "\6\51\3\0\1\51\1\0\1\51\10\0\1\36\12\0"+
    "\12\51\1\0\6\51\1\0\2\51\1\0\1\51\2\0"+
    "\2\51\1\53\2\51\1\63\12\51\1\64\6\51\3\0"+
    "\1\51\1\0\1\51\1\0\1\65\6\0\1\36\12\0"+
    "\7\51\1\66\2\51\1\64\6\51\1\0\2\51\1\0"+
    "\1\51\2\0\2\51\1\67\15\51\1\0\6\51\3\0"+
    "\1\51\1\0\1\51\10\0\1\36\12\0\12\51\1\0"+
    "\6\51\1\0\2\51\1\0\1\51\2\0\2\51\1\53"+
    "\1\70\2\51\1\71\3\51\1\70\5\51\1\0\6\51"+
    "\3\0\1\51\1\0\1\51\10\0\1\36\12\0\12\51"+
    "\1\0\6\51\1\0\2\51\1\0\1\51\2\0\2\51"+
    "\1\53\15\51\1\0\2\51\1\72\3\51\3\0\1\51"+
    "\1\0\1\51\10\0\1\36\12\0\12\51\1\0\6\51"+
    "\1\0\2\51\1\0\1\51\2\0\2\51\1\53\2\51"+
    "\1\73\7\51\1\74\2\51\1\57\6\51\3\0\1\51"+
    "\1\0\1\51\10\0\1\36\12\0\4\51\1\60\5\51"+
    "\1\57\6\51\1\0\2\51\1\0\1\51\2\0\2\51"+
    "\1\53\2\51\1\75\12\51\1\57\6\51\3\0\1\51"+
    "\1\0\1\51\10\0\1\36\12\0\12\51\1\57\6\51"+
    "\1\0\2\51\1\0\1\51\2\0\2\51\1\76\15\51"+
    "\1\57\6\51\3\0\1\51\1\0\1\51\10\0\1\36"+
    "\12\0\3\51\1\60\6\51\1\57\6\51\1\0\2\51"+
    "\1\0\1\51\2\0\2\51\1\53\15\51\1\77\6\51"+
    "\3\0\1\51\1\0\1\51\10\0\1\36\12\0\12\51"+
    "\1\0\6\51\1\0\2\51\1\0\1\51\22\0\1\30"+
    "\46\0\1\100\20\0\2\51\1\101\15\51\1\0\6\51"+
    "\3\0\1\51\1\0\1\51\10\0\1\36\12\0\12\51"+
    "\1\0\6\51\1\0\2\51\1\0\1\51\2\0\2\51"+
    "\1\53\15\51\1\57\2\51\1\52\3\51\3\0\1\51"+
    "\1\0\1\51\10\0\1\36\12\0\12\51\1\57\6\51"+
    "\1\0\2\51\1\0\1\51\2\0\2\51\1\53\15\51"+
    "\1\0\6\51\3\0\1\51\1\0\1\51\4\0\1\102"+
    "\3\0\1\36\12\0\12\51\1\0\6\51\1\0\2\51"+
    "\1\0\1\51\2\0\2\51\1\53\4\51\1\103\1\104"+
    "\7\51\1\0\6\51\3\0\1\51\1\0\1\51\10\0"+
    "\1\36\12\0\12\51\1\0\6\51\1\0\2\51\1\0"+
    "\1\51\2\0\2\51\1\53\5\51\1\104\7\51\1\0"+
    "\6\51\3\0\1\51\1\0\1\51\10\0\1\36\12\0"+
    "\12\51\1\0\6\51\1\0\2\51\1\0\1\51\2\0"+
    "\2\51\1\53\3\51\1\56\11\51\1\0\6\51\3\0"+
    "\1\51\1\0\1\51\10\0\1\36\12\0\12\51\1\0"+
    "\6\51\1\0\2\51\1\0\1\51\32\0\1\105\167\0"+
    "\2\51\1\53\10\51\1\106\4\51\1\0\6\51\3\0"+
    "\1\51\1\0\1\51\10\0\1\36\12\0\12\51\1\0"+
    "\6\51\1\0\2\51\1\0\1\51\11\0\1\107\137\0"+
    "\1\30\110\0\1\30\112\0\1\110\101\0\1\111\52\0"+
    "\1\112\3\0\1\112\7\0\1\112\2\0\1\112\1\0"+
    "\2\112\1\0\1\112\1\0\1\112\3\0\1\112\25\0"+
    "\1\112\3\0\1\112\1\0\1\112\1\0\2\112\2\0"+
    "\1\112\10\0\1\112\57\0\1\30\35\0\1\113\5\0"+
    "\1\114\1\115\1\116\1\0\1\117\5\0\1\120\24\0"+
    "\1\121\12\0\1\122\1\0\1\123\5\0\1\124\2\0"+
    "\1\125\6\0\1\126\2\0\2\51\1\53\15\51\1\57"+
    "\6\51\3\0\1\51\1\0\1\51\10\0\1\36\12\0"+
    "\12\51\1\57\6\51\1\0\2\51\1\0\1\51\2\0"+
    "\1\51\1\127\1\53\10\51\1\60\4\51\1\57\6\51"+
    "\3\0\1\51\1\0\1\51\10\0\1\36\12\0\12\51"+
    "\1\57\6\51\1\0\2\51\1\0\1\51\2\0\2\51"+
    "\1\53\15\51\1\57\6\51\3\0\1\51\1\0\1\51"+
    "\4\0\1\102\3\0\1\36\12\0\12\51\1\57\6\51"+
    "\1\0\2\51\1\0\1\51\2\0\2\51\1\53\15\51"+
    "\1\0\6\51\3\0\1\51\1\0\1\51\1\0\1\65"+
    "\6\0\1\36\12\0\12\51\1\0\6\51\1\0\2\51"+
    "\1\0\1\51\71\0\1\100\20\0\2\51\1\53\15\51"+
    "\1\0\6\51\3\0\1\51\1\0\1\51\10\0\1\36"+
    "\12\0\12\51\1\0\4\51\1\130\1\51\1\0\2\51"+
    "\1\0\1\51\2\0\2\131\1\0\24\131\3\0\1\131"+
    "\1\0\1\131\1\0\1\131\2\0\1\131\16\0\12\131"+
    "\1\0\6\131\1\0\2\131\1\0\1\131\2\0\2\51"+
    "\1\53\15\51\1\132\6\51\3\0\1\51\1\0\1\51"+
    "\10\0\1\36\12\0\12\51\1\0\6\51\1\0\2\51"+
    "\1\0\1\51\2\0\2\51\1\133\15\51\1\132\6\51"+
    "\3\0\1\51\1\0\1\51\10\0\1\36\12\0\12\51"+
    "\1\0\6\51\1\0\2\51\1\0\1\51\2\0\2\134"+
    "\1\0\15\134\1\0\6\134\3\0\1\134\1\0\1\134"+
    "\10\0\1\135\12\0\12\134\1\0\6\134\1\0\2\134"+
    "\1\0\1\134\4\0\1\30\107\0\1\77\105\0\1\51"+
    "\1\52\1\53\15\51\1\132\6\51\3\0\1\51\1\0"+
    "\1\51\10\0\1\36\12\0\12\51\1\0\6\51\1\0"+
    "\2\51\1\0\1\51\2\0\2\51\1\53\15\51\1\136"+
    "\6\51\3\0\1\51\1\0\1\51\10\0\1\36\12\0"+
    "\12\51\1\57\6\51\1\0\2\51\1\0\1\51\2\0"+
    "\2\134\1\0\1\137\14\134\1\0\6\134\3\0\1\134"+
    "\1\0\1\134\10\0\1\135\12\0\12\134\1\0\6\134"+
    "\1\0\2\134\1\0\1\134\2\0\2\51\1\53\1\52"+
    "\14\51\1\132\6\51\3\0\1\51\1\0\1\51\10\0"+
    "\1\36\12\0\12\51\1\0\6\51\1\0\2\51\1\0"+
    "\1\51\2\0\2\51\1\53\12\51\1\60\2\51\1\132"+
    "\6\51\3\0\1\51\1\0\1\51\10\0\1\36\12\0"+
    "\12\51\1\0\6\51\1\0\2\51\1\0\1\51\11\0"+
    "\1\140\5\0\2\57\156\0\1\141\22\0\2\51\1\53"+
    "\4\51\1\142\10\51\1\132\6\51\3\0\1\51\1\0"+
    "\1\51\4\0\1\57\3\0\1\36\12\0\12\51\1\0"+
    "\6\51\1\0\2\51\1\0\1\51\2\0\2\134\1\0"+
    "\3\134\1\137\11\134\1\0\6\134\3\0\1\134\1\0"+
    "\1\134\10\0\1\135\12\0\12\134\1\0\6\134\1\0"+
    "\2\134\1\0\1\134\2\0\2\51\1\53\10\51\1\52"+
    "\4\51\1\132\6\51\3\0\1\51\1\0\1\51\10\0"+
    "\1\36\12\0\12\51\1\0\6\51\1\0\2\51\1\0"+
    "\1\51\2\0\2\51\1\53\13\51\1\60\1\51\1\132"+
    "\6\51\3\0\1\51\1\0\1\51\10\0\1\36\12\0"+
    "\12\51\1\0\6\51\1\0\2\51\1\0\1\51\2\0"+
    "\2\51\1\53\15\51\1\132\2\51\1\143\3\51\3\0"+
    "\1\51\1\0\1\51\10\0\1\36\12\0\12\51\1\0"+
    "\6\51\1\0\2\51\1\0\1\51\2\0\2\51\1\133"+
    "\12\51\1\52\2\51\1\132\6\51\3\0\1\51\1\0"+
    "\1\51\10\0\1\36\12\0\12\51\1\0\6\51\1\0"+
    "\2\51\1\0\1\51\2\0\2\51\1\133\7\51\1\52"+
    "\5\51\1\132\6\51\3\0\1\51\1\0\1\51\10\0"+
    "\1\36\12\0\12\51\1\0\6\51\1\0\2\51\1\0"+
    "\1\51\2\0\2\51\1\53\6\51\1\52\6\51\1\132"+
    "\6\51\3\0\1\51\1\0\1\51\10\0\1\36\12\0"+
    "\12\51\1\0\6\51\1\0\2\51\1\0\1\51\2\0"+
    "\2\134\1\0\12\134\1\144\2\134\1\0\6\134\3\0"+
    "\1\134\1\0\1\134\10\0\1\135\12\0\12\134\1\0"+
    "\6\134\1\0\2\134\1\0\1\134\11\0\1\145\26\0"+
    "\1\57\51\0\1\144\1\134\1\0\15\134\1\0\6\134"+
    "\3\0\1\134\1\0\1\134\10\0\1\135\12\0\12\134"+
    "\1\0\6\134\1\0\2\134\1\0\1\134\1\0\3\146"+
    "\1\147\15\146\1\147\6\146\3\147\1\146\1\147\1\146"+
    "\4\147\2\146\1\147\4\146\4\147\2\146\2\147\27\146"+
    "\1\0\2\51\1\53\12\51\1\52\2\51\1\132\6\51"+
    "\3\0\1\51\1\0\1\51\10\0\1\36\12\0\12\51"+
    "\1\0\6\51\1\0\2\51\1\0\1\51\2\0\2\51"+
    "\1\53\13\51\1\70\1\51\1\132\6\51\3\0\1\51"+
    "\1\0\1\51\10\0\1\36\12\0\12\51\1\0\6\51"+
    "\1\0\2\51\1\0\1\51\33\0\1\77\56\0\2\51"+
    "\1\150\15\51\1\132\6\51\3\0\1\51\1\0\1\51"+
    "\10\0\1\36\12\0\12\51\1\0\6\51\1\0\2\51"+
    "\1\0\1\51\25\0\1\151\130\0\1\30\43\0\2\111"+
    "\1\53\15\111\1\0\6\111\3\0\1\111\1\0\1\111"+
    "\10\0\1\36\12\0\12\111\1\0\6\111\1\0\2\111"+
    "\1\0\1\111\2\0\1\152\3\0\1\152\7\0\1\152"+
    "\2\0\1\152\1\0\2\152\1\0\1\152\1\0\1\152"+
    "\3\0\1\152\25\0\1\152\3\0\1\152\1\0\1\152"+
    "\1\0\2\152\2\0\1\152\10\0\1\152\11\0\1\153"+
    "\103\0\1\154\53\0\1\155\3\0\1\156\33\0\1\157"+
    "\106\0\1\160\1\0\1\161\156\0\1\155\13\0\1\162"+
    "\22\0\1\163\1\0\1\164\102\0\1\165\5\0\1\166"+
    "\1\115\1\167\1\0\1\170\5\0\1\120\37\0\1\122"+
    "\1\0\1\171\5\0\1\172\2\0\1\173\12\0\1\174"+
    "\116\0\1\175\100\0\1\176\55\0\1\155\3\0\1\126"+
    "\25\0\1\177\106\0\27\200\1\0\1\200\1\0\1\200"+
    "\1\0\1\200\1\0\1\200\6\0\1\201\1\200\1\0"+
    "\1\200\2\0\1\200\4\0\12\200\1\0\11\200\1\0"+
    "\1\200\2\0\2\51\1\53\15\51\1\132\6\51\3\0"+
    "\1\51\1\0\1\51\10\0\1\36\12\0\5\51\1\60"+
    "\4\51\1\0\6\51\1\0\2\51\1\0\1\51\2\0"+
    "\2\51\1\53\15\51\1\132\6\51\3\0\1\51\1\0"+
    "\1\51\10\0\1\36\12\0\12\51\1\0\4\51\1\202"+
    "\1\51\1\0\2\51\1\0\1\51\2\0\2\131\1\0"+
    "\24\131\3\0\1\131\1\0\1\131\1\0\1\131\2\0"+
    "\1\131\16\0\12\131\1\0\6\131\1\0\2\131\1\0"+
    "\1\131\1\203\16\0\1\204\72\0\2\205\1\0\15\205"+
    "\1\0\6\205\3\0\1\205\1\0\1\205\10\0\1\206"+
    "\12\0\12\205\1\0\6\205\1\0\2\205\1\207\1\205"+
    "\37\0\1\134\52\0\2\205\1\77\15\205\1\0\6\205"+
    "\3\0\1\205\1\0\1\205\10\0\1\206\12\0\12\205"+
    "\1\0\6\205\1\0\2\205\1\207\1\205\25\0\1\57"+
    "\77\0\1\210\74\0\2\51\1\53\15\51\1\132\6\51"+
    "\3\0\1\51\1\0\1\51\4\0\1\57\3\0\1\36"+
    "\12\0\12\51\1\0\6\51\1\0\2\51\1\0\1\51"+
    "\2\0\2\51\1\53\15\51\1\132\6\51\3\0\1\51"+
    "\1\0\1\51\10\0\1\36\12\0\12\51\1\0\1\211"+
    "\5\51\1\0\2\51\1\0\1\51\2\0\2\205\1\0"+
    "\10\205\1\212\4\205\1\0\6\205\3\0\1\205\1\0"+
    "\1\205\10\0\1\206\12\0\12\205\1\0\6\205\1\0"+
    "\2\205\1\207\1\205\40\0\1\57\50\0\110\146\1\0"+
    "\2\134\1\0\1\134\1\213\13\134\1\0\6\134\3\0"+
    "\1\134\1\0\1\134\10\0\1\135\12\0\12\134\1\0"+
    "\6\134\1\0\2\134\1\0\1\134\63\0\1\214\26\0"+
    "\1\215\3\0\1\215\7\0\1\215\2\0\1\215\1\0"+
    "\2\215\1\0\1\215\1\0\1\215\3\0\1\215\25\0"+
    "\1\215\3\0\1\215\1\0\1\215\1\0\2\215\2\0"+
    "\1\215\10\0\1\215\75\0\1\216\73\0\1\155\30\0"+
    "\27\200\1\0\1\200\1\0\1\200\1\0\1\200\1\0"+
    "\1\200\6\0\1\201\1\200\1\0\1\200\2\0\1\200"+
    "\3\0\1\155\12\200\1\0\11\200\1\0\1\200\75\0"+
    "\1\217\23\0\1\220\136\0\1\221\57\0\1\222\1\223"+
    "\175\0\1\224\35\0\1\225\73\0\1\226\103\0\1\154"+
    "\53\0\1\155\3\0\1\154\32\0\1\160\1\0\1\154"+
    "\156\0\1\155\13\0\1\227\24\0\1\230\100\0\1\176"+
    "\55\0\1\155\31\0\1\231\173\0\1\232\124\0\1\156"+
    "\13\0\1\233\106\0\1\234\102\0\27\200\1\0\1\200"+
    "\1\0\1\200\1\0\1\200\1\0\1\200\6\0\1\201"+
    "\1\200\1\0\1\200\2\0\1\200\3\0\1\235\12\200"+
    "\1\0\11\200\1\0\1\200\37\0\1\200\52\0\2\236"+
    "\1\53\15\236\1\132\6\236\3\0\1\236\1\0\1\236"+
    "\10\0\1\237\12\0\12\236\1\0\6\236\1\0\2\236"+
    "\1\0\1\236\2\0\2\205\1\53\15\205\1\0\6\205"+
    "\3\0\1\205\1\0\1\205\10\0\1\206\12\0\12\205"+
    "\1\0\6\205\1\0\2\205\1\207\1\205\37\0\1\205"+
    "\52\0\2\240\1\0\15\240\1\0\6\240\3\0\1\240"+
    "\1\0\1\240\10\0\1\241\12\0\12\240\1\0\6\240"+
    "\1\0\2\240\1\0\1\240\22\0\1\57\51\0\1\57"+
    "\15\0\2\51\1\53\15\51\1\132\6\51\3\0\1\51"+
    "\1\0\1\51\10\0\1\36\3\0\1\242\6\0\12\51"+
    "\1\0\6\51\1\0\2\51\1\0\1\51\2\0\2\205"+
    "\1\133\15\205\1\0\6\205\3\0\1\205\1\0\1\205"+
    "\10\0\1\206\12\0\12\205\1\0\6\205\1\0\2\205"+
    "\1\207\1\205\12\0\1\243\12\0\1\244\12\0\1\245"+
    "\122\0\1\246\74\0\1\247\11\0\1\154\6\0\1\155"+
    "\53\0\1\250\151\0\1\154\27\0\1\251\111\0\1\252"+
    "\167\0\1\154\43\0\1\154\75\0\1\253\171\0\1\154"+
    "\22\0\1\254\1\223\202\0\1\154\12\0\1\255\202\0"+
    "\1\154\25\0\1\154\77\0\1\256\101\0\2\236\1\257"+
    "\15\236\1\132\6\236\3\0\1\236\1\0\1\236\10\0"+
    "\1\237\12\0\12\236\1\0\6\236\1\0\2\236\1\0"+
    "\1\236\37\0\1\260\52\0\2\240\1\261\15\240\1\0"+
    "\6\240\3\0\1\240\1\0\1\240\10\0\1\241\12\0"+
    "\12\240\1\0\6\240\1\0\2\240\1\0\1\240\37\0"+
    "\1\240\122\0\1\262\55\0\1\263\104\0\1\264\111\0"+
    "\1\265\5\0\1\266\151\0\1\267\32\0\1\270\105\0"+
    "\1\271\204\0\1\272\12\0\1\154\110\0\1\273\106\0"+
    "\1\274\111\0\1\275\77\0\2\276\1\0\15\276\1\0"+
    "\6\276\3\0\1\276\1\0\1\276\10\0\1\277\12\0"+
    "\12\276\1\0\6\276\1\0\2\276\1\0\1\276\2\0"+
    "\2\260\1\257\15\260\1\0\6\260\3\0\1\260\1\0"+
    "\1\260\10\0\1\237\12\0\12\260\1\0\6\260\1\0"+
    "\2\260\1\0\1\260\2\0\2\300\1\0\15\300\1\0"+
    "\6\300\3\0\1\300\1\0\1\300\10\0\1\301\12\0"+
    "\12\300\1\0\6\300\1\0\2\300\1\0\1\300\52\0"+
    "\1\302\47\0\1\303\4\0\1\304\5\0\1\244\12\0"+
    "\1\245\60\0\1\305\110\0\1\306\161\0\1\307\33\0"+
    "\1\310\102\0\1\223\175\0\1\311\26\0\1\312\204\0"+
    "\1\313\14\0\1\314\102\0\1\315\104\0\2\316\1\317"+
    "\15\316\1\0\6\316\3\0\1\316\1\0\1\316\10\0"+
    "\1\320\12\0\12\316\1\0\6\316\1\0\2\316\1\207"+
    "\1\316\37\0\1\276\107\0\1\300\52\0\2\321\1\0"+
    "\15\321\1\0\6\321\3\0\1\321\1\0\1\321\10\0"+
    "\1\322\12\0\12\321\1\0\6\321\1\0\2\321\1\0"+
    "\1\321\20\0\1\263\46\0\1\323\30\0\1\307\106\0"+
    "\1\307\111\0\1\324\115\0\1\325\157\0\1\326\27\0"+
    "\1\327\110\0\1\330\104\0\1\223\173\0\1\331\20\0"+
    "\2\316\1\257\15\316\1\0\6\316\3\0\1\316\1\0"+
    "\1\316\10\0\1\320\12\0\12\316\1\0\6\316\1\0"+
    "\2\316\1\207\1\316\2\0\2\332\1\0\15\332\1\0"+
    "\6\332\3\0\1\332\1\0\1\332\10\0\1\333\12\0"+
    "\12\332\1\0\6\332\1\0\2\332\1\0\1\332\37\0"+
    "\1\316\52\0\2\321\1\317\15\321\1\0\6\321\3\0"+
    "\1\321\1\0\1\321\10\0\1\322\12\0\12\321\1\0"+
    "\6\321\1\0\2\321\1\0\1\321\37\0\1\321\62\0"+
    "\1\243\12\0\1\244\12\0\1\245\30\0\1\304\105\0"+
    "\1\307\34\0\1\334\143\0\1\335\142\0\1\336\13\0"+
    "\1\337\140\0\1\340\51\0\2\332\1\317\15\332\1\0"+
    "\6\332\3\0\1\332\1\0\1\332\10\0\1\333\12\0"+
    "\12\332\1\0\6\332\1\0\2\332\1\0\1\332\37\0"+
    "\1\332\120\0\1\341\61\0\1\342\32\0\1\342\57\0"+
    "\1\343\165\0\1\344\17\0\1\345\116\0\1\346\32\0"+
    "\1\346\44\0\1\347\52\0\1\350\51\0\1\351\105\0"+
    "\1\352\73\0\1\353\103\0\1\354\2\0\1\355\2\0"+
    "\1\356\1\357\2\0\1\360\1\0\1\361\3\0\1\362"+
    "\37\0\1\363\3\0\1\364\6\0\1\365\1\366\33\0"+
    "\1\367\65\0\1\367\113\0\1\370\127\0\1\371\151\0"+
    "\1\372\26\0\1\373\2\0\1\374\165\0\1\375\27\0"+
    "\1\376\101\0\1\377\201\0\1\u0100\25\0\1\u0101\105\0"+
    "\1\u0102\110\0\1\u0103\100\0\1\u0104\113\0\1\u0105\110\0"+
    "\1\u0106\121\0\1\154\32\0\1\154\123\0\1\126\25\0"+
    "\1\223\105\0\1\u0107\111\0\1\u0108\103\0\1\u0109\111\0"+
    "\1\u010a\127\0\1\u010b\153\0\1\u010c\27\0\1\u010d\165\0"+
    "\1\u010e\105\0\1\u010f\107\0\1\u0110\47\0\1\u0111\72\0"+
    "\1\u0112\112\0\1\u0113\144\0\1\u0114\57\0\1\u0115\106\0"+
    "\1\u0116\103\0\1\u0117\106\0\1\u0118\122\0\1\u0119\153\0"+
    "\1\u011a\56\0\1\u011b\62\0\1\u0111\107\0\1\u011c\104\0"+
    "\1\u011c\170\0\1\u011d\35\0\1\u011e\112\0\1\u011f\32\0"+
    "\1\u011f\43\0\1\u0120\115\0\1\u0121\102\0\1\u0122\166\0"+
    "\1\u011c\27\0\1\u0123\110\0\1\u0113\173\0\1\u0124\33\0"+
    "\1\u0125\32\0\1\u0125\46\0\1\u011e\110\0\1\u011c\102\0"+
    "\1\u0126\2\0\1\u0127\64\0\1\u0128\100\0\1\u0129\27\0"+
    "\1\u012a\115\0\1\u012b\104\0\1\u012c\102\0\1\u011a\152\0"+
    "\1\154\126\0\1\367\27\0\1\367\105\0\1\367\122\0"+
    "\1\u0125\15\0\1\u012d\14\0\1\u0125\41\0\1\u012e\115\0"+
    "\1\u0129\117\0\1\u012f\107\0\1\u0130\164\0\1\u011c\110\0"+
    "\1\u0131\14\0\1\u0132\111\0\1\u0133\174\0\1\u0134\101\0"+
    "\1\u0135\43\0\1\u011c\162\0\1\u0136\12\0\1\u011c\105\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[21384];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\26\1\1\11\4\1\4\0\5\1\1\0\1\1"+
    "\1\0\2\1\3\0\1\1\1\11\1\1\1\0\3\1"+
    "\1\0\1\1\1\0\6\1\1\0\1\11\2\0\3\1"+
    "\1\0\1\1\20\0\2\1\2\0\1\1\2\0\1\1"+
    "\3\0\2\1\2\0\1\1\6\0\1\11\24\0\1\1"+
    "\2\11\4\0\1\1\1\0\1\1\21\0\1\11\1\1"+
    "\7\0\1\11\14\0\1\1\12\0\1\1\1\0\1\1"+
    "\6\0\1\1\6\0\1\1\4\0\1\1\6\0\1\1"+
    "\134\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[310];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

    public final int yychar() {
        return yychar;
    }

    public final String getText() {
        return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public IrishTokeniserImpl(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public IrishTokeniserImpl(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 682) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int getNextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 4: 
          { return 3;
          }
        case 14: break;
        case 1: 
          { return 0;
          }
        case 15: break;
        case 8: 
          { return 12 ;
          }
        case 16: break;
        case 13: 
          { return 8;
          }
        case 17: break;
        case 12: 
          { return 13 ;
          }
        case 18: break;
        case 2: 
          { return 5;
          }
        case 19: break;
        case 5: 
          { return 2;
          }
        case 20: break;
        case 9: 
          { return 10 ;
          }
        case 21: break;
        case 7: 
          { return 7;
          }
        case 22: break;
        case 3: 
          { return 4;
          }
        case 23: break;
        case 11: 
          { return 1;
          }
        case 24: break;
        case 6: 
          { return 11 ;
          }
        case 25: break;
        case 10: 
          { return 9 ;
          }
        case 26: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                return -1;
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
