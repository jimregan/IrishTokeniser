/* The following code was generated by JFlex 1.4.3 on 06/10/16 09:01 */

/*
 * Copyright 2016 Trinity College, Dublin
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
package ie.tcd.slscs.tokeniser.ga;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 06/10/16 09:01 from the specification file
 * <tt>c:/msys32/home/Abair/IrishTokeniser/src/main/jflex/irish.jflex</tt>
 */
public final class IrishTokeniserImpl {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\53\1\53\25\0\1\37\1\34\1\54\1\34\2\0\1\34"+
    "\1\21\1\34\1\34\1\50\1\0\1\41\1\42\1\3\1\51\12\46"+
    "\1\52\1\36\1\57\1\47\1\60\1\31\1\112\1\76\1\72\1\1"+
    "\1\5\1\116\1\115\1\117\1\74\1\102\1\61\1\121\1\113\1\15"+
    "\1\77\1\20\1\33\1\61\1\22\1\23\1\27\1\25\1\61\1\122"+
    "\1\61\1\120\1\61\1\30\1\0\1\32\1\114\1\107\1\40\1\10"+
    "\1\71\1\13\1\73\1\7\1\104\1\4\1\14\1\11\1\35\1\111"+
    "\1\12\1\17\1\75\1\2\1\101\1\35\1\6\1\16\1\24\1\26"+
    "\1\110\1\105\1\103\1\106\1\35\1\34\1\0\1\34\1\34\42\0"+
    "\1\34\1\0\1\56\2\0\1\45\2\0\1\34\1\0\1\34\1\34"+
    "\1\0\1\34\1\34\1\34\1\34\1\34\1\34\1\0\1\34\1\0"+
    "\1\34\1\0\1\34\1\34\1\34\1\34\1\34\1\34\1\34\1\0"+
    "\1\62\1\55\1\0\5\0\1\63\3\0\1\61\5\0\1\64\3\0"+
    "\1\34\2\0\1\61\6\0\1\65\1\43\6\0\1\66\3\0\1\35"+
    "\5\0\1\67\4\0\1\34\1\0\1\70\66\0\1\34\41\0\1\45"+
    "\76\0\1\34\u0147\0\1\34\1\0\1\45\264\0\1\34\1\34\1\34"+
    "\1\34\1\34\1\34\1\34\1\34\1\34\1\34\1\34\1\34\1\34"+
    "\1\34\1\34\1\34\1\34\1\0\1\34\1\34\1\34\1\34\1\34"+
    "\1\34\1\34\7\0\1\34\1\34\1\34\1\34\1\34\1\34\1\34"+
    "\1\34\1\34\1\34\1\34\1\34\1\34\1\34\1\34\1\34\1\34"+
    "\1\34\1\34\1\34\1\34\1\34\1\34\1\34\1\34\7\0\1\34"+
    "\u0116\0\1\34\u1b30\0\1\100\6\0\1\34\1\0\1\34\3\0\1\34"+
    "\11\0\1\34\23\0\1\34\147\0\1\44\150\0\1\34\20\0\1\34"+
    "\54\0\1\34\1\34\74\0\1\34\1\34\1\34\1\34\1\34\1\34"+
    "\1\34\1\34\1\34\17\0\1\34\1\34\47\0\1\34\1\0\1\34"+
    "\53\0\1\34\1\0\1\34\3\0\1\34\10\0\1\34\1\0\1\34"+
    "\3\0\1\34\4\0\1\34\2\0\1\34\1\34\1\0\1\34\6\0"+
    "\1\34\1\0\1\34\1\34\11\0\1\34\23\0\1\34\27\0\1\34"+
    "\1\34\2\0\1\34\1\34\u01fa\0\1\34\1\34\1\34\1\34\1\34"+
    "\1\34\1\34\1\34\1\34\1\34\1\34\1\34\1\34\1\34\1\34"+
    "\1\34\1\34\1\34\1\34\1\34\u0142\0\1\34\5\0\1\34\3\0"+
    "\1\34\223\0\1\34\1\34\1\34\4\0\1\34\1\34\3\0\1\34"+
    "\2\0\1\34\1\0\1\34\1\34\255\0\1\34\3\0\1\34\205\0"+
    "\1\34\2\0\1\34\u0192\0\1\34\1\34\u01cf\0\1\34\1\34\1\34"+
    "\u0658\0\1\34\uce9c\0\1\45\2\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\14\1\1\2\6\1\2\2\1\1"+
    "\1\3\2\2\4\0\1\2\5\1\1\0\4\1\1\0"+
    "\2\1\1\0\2\1\2\0\2\1\1\4\2\1\1\0"+
    "\2\1\1\4\1\1\1\0\1\1\2\0\6\1\1\4"+
    "\2\1\1\0\1\5\2\0\1\6\2\1\1\0\1\1"+
    "\20\0\5\1\2\0\1\5\2\0\2\1\5\0\1\4"+
    "\4\0\1\1\2\0\3\1\2\0\1\6\6\0\1\7"+
    "\25\0\3\1\1\10\1\11\3\0\1\1\17\0\1\1"+
    "\1\0\1\1\1\0\1\5\1\12\20\0\1\13\1\0"+
    "\2\1\31\0\1\14\24\0\1\15\2\0\1\16\4\0"+
    "\1\12\13\0\1\17\2\0\1\17\2\0\1\15\13\0"+
    "\1\12\6\0\1\17\13\0\1\12\6\0\1\17\1\0"+
    "\1\16\150\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[426];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\123\0\246\0\371\0\u014c\0\u019f\0\u01f2\0\u0245"+
    "\0\u0298\0\u02eb\0\u033e\0\u0391\0\u03e4\0\u0437\0\u048a\0\u04dd"+
    "\0\u0530\0\u0583\0\u05d6\0\u0629\0\u067c\0\u06cf\0\u0722\0\u0775"+
    "\0\u07c8\0\u081b\0\u086e\0\u08c1\0\u0914\0\u0967\0\u09ba\0\u0a0d"+
    "\0\u0a60\0\u0ab3\0\u0b06\0\u0b59\0\u0bac\0\u0bff\0\u0c52\0\u0ca5"+
    "\0\u0cf8\0\u0d4b\0\u0d9e\0\u0df1\0\u0e44\0\u0e97\0\u0eea\0\u0f3d"+
    "\0\u0f90\0\u0fe3\0\u1036\0\u1089\0\u10dc\0\u112f\0\u1182\0\u11d5"+
    "\0\u1228\0\u127b\0\u12ce\0\u1321\0\u1374\0\u13c7\0\u141a\0\u146d"+
    "\0\u14c0\0\u1513\0\u1566\0\u15b9\0\u160c\0\u165f\0\u16b2\0\u1705"+
    "\0\u07c8\0\u1758\0\u17ab\0\u17fe\0\u07c8\0\u1851\0\u18a4\0\u18f7"+
    "\0\u194a\0\u199d\0\u19f0\0\u1a43\0\u1a96\0\u1ae9\0\u1b3c\0\u1b8f"+
    "\0\u1be2\0\u1c35\0\u1c88\0\u1cdb\0\u1d2e\0\u1d81\0\u1dd4\0\u1e27"+
    "\0\u1e7a\0\u1ecd\0\u1f20\0\u1f73\0\u1fc6\0\u2019\0\u206c\0\u20bf"+
    "\0\u2112\0\u2165\0\u21b8\0\u0f3d\0\u220b\0\u225e\0\u22b1\0\u2304"+
    "\0\u2357\0\u23aa\0\u23fd\0\u2450\0\u24a3\0\u21b8\0\u24f6\0\u2549"+
    "\0\u259c\0\u25ef\0\u2642\0\u2695\0\u26e8\0\u273b\0\u278e\0\u27e1"+
    "\0\u2834\0\u2887\0\u28da\0\u28da\0\u292d\0\u2980\0\u29d3\0\u2a26"+
    "\0\u2a79\0\u07c8\0\u2acc\0\u2b1f\0\u2b72\0\u2bc5\0\u2c18\0\u2c6b"+
    "\0\u2cbe\0\u2d11\0\u2d64\0\u2db7\0\u2e0a\0\u2e5d\0\u2eb0\0\u2f03"+
    "\0\u2f56\0\u2fa9\0\u2ffc\0\u304f\0\u30a2\0\u30f5\0\u3148\0\u319b"+
    "\0\u31ee\0\u3241\0\u07c8\0\u07c8\0\u3294\0\u32e7\0\u333a\0\u338d"+
    "\0\u33e0\0\u3433\0\u3486\0\u34d9\0\u352c\0\u357f\0\u35d2\0\u3625"+
    "\0\u3678\0\u36cb\0\u371e\0\u3771\0\u37c4\0\u3817\0\u386a\0\u38bd"+
    "\0\u3910\0\u3963\0\u39b6\0\u220b\0\u3a09\0\u3a5c\0\u3aaf\0\u3b02"+
    "\0\u3b55\0\u3ba8\0\u3bfb\0\u3c4e\0\u3ca1\0\u3cf4\0\u3d47\0\u3d9a"+
    "\0\u3ded\0\u3e40\0\u3e93\0\u3ee6\0\u3f39\0\u07c8\0\u3f8c\0\u3fdf"+
    "\0\u4032\0\u4085\0\u40d8\0\u412b\0\u417e\0\u41d1\0\u4224\0\u4277"+
    "\0\u42ca\0\u431d\0\u4370\0\u43c3\0\u4416\0\u4469\0\u44bc\0\u450f"+
    "\0\u4562\0\u45b5\0\u4608\0\u465b\0\u46ae\0\u4701\0\u4754\0\u47a7"+
    "\0\u47fa\0\u484d\0\u07c8\0\u48a0\0\u48f3\0\u4946\0\u4999\0\u49ec"+
    "\0\u4a3f\0\u4a92\0\u4ae5\0\u4b38\0\u4b8b\0\u4bde\0\u4c31\0\u4c84"+
    "\0\u4cd7\0\u4d2a\0\u4d7d\0\u4dd0\0\u4e23\0\u4e76\0\u4ec9\0\u07c8"+
    "\0\u4f1c\0\u4f6f\0\u07c8\0\u4fc2\0\u5015\0\u5068\0\u50bb\0\u510e"+
    "\0\u5161\0\u51b4\0\u5207\0\u525a\0\u52ad\0\u5300\0\u5353\0\u53a6"+
    "\0\u53f9\0\u544c\0\u549f\0\u54f2\0\u5545\0\u5598\0\u4cd7\0\u55eb"+
    "\0\u563e\0\u5691\0\u56e4\0\u5737\0\u578a\0\u57dd\0\u5830\0\u5883"+
    "\0\u58d6\0\u5929\0\u597c\0\u59cf\0\u5a22\0\u07c8\0\u5a75\0\u5ac8"+
    "\0\u5b1b\0\u5b6e\0\u5bc1\0\u5c14\0\u5c67\0\u5cba\0\u5d0d\0\u5d60"+
    "\0\u5db3\0\u5e06\0\u5e59\0\u5eac\0\u5eff\0\u5f52\0\u5fa5\0\u5ff8"+
    "\0\u604b\0\u609e\0\u60f1\0\u6144\0\u6197\0\u61ea\0\u623d\0\u6290"+
    "\0\u62e3\0\u6336\0\u6389\0\u63dc\0\u642f\0\u6482\0\u64d5\0\u6528"+
    "\0\u657b\0\u65ce\0\u6621\0\u6674\0\u66c7\0\u671a\0\u676d\0\u67c0"+
    "\0\u6813\0\u6866\0\u68b9\0\u690c\0\u695f\0\u69b2\0\u6a05\0\u6a58"+
    "\0\u6aab\0\u6afe\0\u6b51\0\u6ba4\0\u6bf7\0\u6c4a\0\u6c9d\0\u6cf0"+
    "\0\u6d43\0\u6d96\0\u6de9\0\u6e3c\0\u6e8f\0\u6ee2\0\u6f35\0\u6f88"+
    "\0\u6fdb\0\u702e\0\u7081\0\u70d4\0\u7127\0\u717a\0\u71cd\0\u7220"+
    "\0\u7273\0\u72c6\0\u7319\0\u736c\0\u73bf\0\u7412\0\u7465\0\u74b8"+
    "\0\u750b\0\u755e\0\u75b1\0\u7604\0\u7657\0\u76aa\0\u76fd\0\u7750"+
    "\0\u77a3\0\u77f6\0\u7849\0\u789c\0\u78ef\0\u7942\0\u7995\0\u79e8"+
    "\0\u7a3b\0\u7a8e\0\u7ae1\0\u7b34\0\u7b87\0\u7bda\0\u7c2d\0\u7c80"+
    "\0\u7cd3\0\u7d26\0\u7d79\0\u7dcc\0\u7e1f\0\u7e72\0\u7ec5\0\u7f18"+
    "\0\u7f6b\0\u7fbe\0\u8011\0\u8064\0\u80b7\0\u810a\0\u815d\0\u81b0"+
    "\0\u8203\0\u8256\0\u82a9\0\u82fc\0\u834f\0\u83a2\0\u83f5\0\u8448"+
    "\0\u849b\0\u84ee";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[426];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\2\1\3\1\4\1\5\1\6\1\3\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\2\31\1\32\1\31\1\3\1\31\1\33\1\34"+
    "\1\35\1\31\1\36\1\31\1\0\1\37\1\0\1\40"+
    "\2\31\1\0\1\31\1\41\1\0\1\42\1\31\10\3"+
    "\2\43\1\44\1\3\1\45\1\46\1\47\1\50\1\3"+
    "\1\51\1\3\1\52\1\53\1\54\1\0\2\3\1\0"+
    "\1\3\1\55\1\52\2\3\1\54\2\3\1\0\1\56"+
    "\1\57\1\60\10\56\1\61\4\56\1\0\6\56\3\0"+
    "\1\56\1\0\1\56\10\0\1\37\12\0\2\56\1\62"+
    "\2\56\1\62\5\56\1\61\3\56\1\0\6\56\1\0"+
    "\2\56\1\0\1\56\1\0\6\56\1\0\2\56\1\60"+
    "\15\56\1\0\6\56\3\0\1\56\1\0\1\56\10\0"+
    "\1\37\12\0\17\56\1\0\6\56\1\0\2\56\1\0"+
    "\1\56\1\0\6\56\3\0\1\63\5\0\1\64\112\0"+
    "\1\65\1\56\1\60\15\56\1\0\6\56\3\0\1\56"+
    "\1\0\1\56\10\0\1\37\12\0\17\56\1\0\6\56"+
    "\1\0\2\56\1\0\1\56\1\0\6\56\1\0\2\56"+
    "\1\60\2\56\1\57\1\66\11\56\1\67\6\56\3\0"+
    "\1\56\1\0\1\56\10\0\1\37\12\0\1\56\1\70"+
    "\2\56\1\70\6\56\1\71\3\56\1\67\6\56\1\0"+
    "\2\56\1\0\1\56\1\0\1\56\1\66\4\56\1\0"+
    "\2\56\1\72\4\56\1\73\10\56\1\0\6\56\3\0"+
    "\1\56\1\0\1\56\10\0\1\37\12\0\17\56\1\0"+
    "\6\56\1\0\2\56\1\0\1\56\1\0\6\56\1\0"+
    "\2\56\1\60\2\56\1\74\12\56\1\75\1\76\5\56"+
    "\3\0\1\56\1\0\1\56\1\0\1\77\6\0\1\37"+
    "\12\0\14\56\1\100\2\56\1\75\6\56\1\0\2\56"+
    "\1\0\1\56\1\0\6\56\1\0\2\56\1\101\15\56"+
    "\1\0\6\56\3\0\1\56\1\0\1\56\1\0\1\102"+
    "\6\0\1\37\12\0\17\56\1\0\6\56\1\0\2\56"+
    "\1\0\1\56\1\0\6\56\1\0\2\56\1\60\1\103"+
    "\2\56\1\104\3\56\1\103\5\56\1\0\6\56\3\0"+
    "\1\56\1\0\1\56\10\0\1\37\12\0\17\56\1\0"+
    "\6\56\1\0\2\56\1\0\1\56\1\0\6\56\1\0"+
    "\2\56\1\60\10\56\1\61\4\56\1\0\6\56\3\0"+
    "\1\56\1\0\1\56\10\0\1\37\12\0\2\56\1\62"+
    "\2\56\1\62\5\56\1\61\3\56\1\0\6\56\1\0"+
    "\2\56\1\0\1\56\1\0\6\56\1\0\2\56\1\60"+
    "\15\56\1\0\2\56\1\105\3\56\3\0\1\56\1\0"+
    "\1\56\10\0\1\37\12\0\17\56\1\0\6\56\1\0"+
    "\2\56\1\0\1\56\1\0\6\56\1\0\2\56\1\60"+
    "\2\56\1\106\1\56\1\107\5\56\1\110\2\56\1\111"+
    "\6\56\3\0\1\56\1\0\1\56\10\0\1\37\12\0"+
    "\11\56\1\71\3\56\1\107\1\56\1\111\6\56\1\0"+
    "\2\56\1\0\1\56\1\0\6\56\1\0\1\56\1\112"+
    "\1\60\2\56\1\113\11\56\1\112\1\111\6\56\3\0"+
    "\1\56\1\0\1\56\10\0\1\37\12\0\17\56\1\111"+
    "\6\56\1\0\2\56\1\0\1\56\1\0\6\56\1\0"+
    "\2\56\1\114\4\56\1\107\10\56\1\111\6\56\3\0"+
    "\1\56\1\0\1\56\10\0\1\37\12\0\10\56\1\71"+
    "\4\56\1\107\1\56\1\111\6\56\1\0\2\56\1\0"+
    "\1\56\1\0\6\56\1\0\2\56\1\60\15\56\1\115"+
    "\6\56\3\0\1\56\1\0\1\56\10\0\1\37\12\0"+
    "\17\56\1\0\6\56\1\0\2\56\1\0\1\56\1\0"+
    "\6\56\21\0\1\31\53\0\1\116\26\0\2\56\1\117"+
    "\15\56\1\0\6\56\3\0\1\56\1\0\1\56\10\0"+
    "\1\37\12\0\17\56\1\0\6\56\1\0\2\56\1\0"+
    "\1\56\1\0\6\56\1\0\1\56\1\112\1\60\14\56"+
    "\1\112\1\111\2\56\1\57\3\56\3\0\1\56\1\0"+
    "\1\56\10\0\1\37\12\0\17\56\1\111\6\56\1\0"+
    "\2\56\1\0\1\56\1\0\6\56\1\0\2\56\1\60"+
    "\15\56\1\0\6\56\3\0\1\56\1\0\1\56\4\0"+
    "\1\120\3\0\1\37\12\0\17\56\1\0\6\56\1\0"+
    "\2\56\1\0\1\56\1\0\6\56\1\0\2\56\1\60"+
    "\4\56\1\121\1\122\7\56\1\0\6\56\3\0\1\56"+
    "\1\0\1\56\10\0\1\37\12\0\17\56\1\0\6\56"+
    "\1\0\2\56\1\0\1\56\1\0\6\56\1\0\2\56"+
    "\1\60\5\56\1\122\7\56\1\0\6\56\3\0\1\56"+
    "\1\0\1\56\10\0\1\37\12\0\17\56\1\0\6\56"+
    "\1\0\2\56\1\0\1\56\1\0\6\56\1\0\2\56"+
    "\1\60\3\56\1\65\11\56\1\0\6\56\3\0\1\56"+
    "\1\0\1\56\10\0\1\37\12\0\17\56\1\0\6\56"+
    "\1\0\2\56\1\0\1\56\1\0\6\56\31\0\1\123"+
    "\215\0\2\56\1\60\10\56\1\124\4\56\1\0\6\56"+
    "\3\0\1\56\1\0\1\56\10\0\1\37\12\0\17\56"+
    "\1\0\6\56\1\0\2\56\1\0\1\56\1\0\6\56"+
    "\10\0\1\125\152\0\1\31\123\0\1\31\125\0\1\126"+
    "\114\0\1\127\65\0\1\130\3\0\1\130\7\0\1\130"+
    "\2\0\1\130\1\0\2\130\1\0\1\130\1\0\1\130"+
    "\3\0\1\130\25\0\4\130\5\0\1\130\1\0\1\130"+
    "\1\0\2\130\2\0\1\130\10\0\1\130\1\0\6\130"+
    "\56\0\1\31\50\0\1\131\5\0\1\132\1\133\1\134"+
    "\1\0\1\135\5\0\1\136\24\0\1\137\17\0\1\140"+
    "\1\0\1\141\5\0\1\142\2\0\1\143\6\0\1\144"+
    "\10\0\2\56\1\60\15\56\1\111\6\56\3\0\1\56"+
    "\1\0\1\56\10\0\1\37\12\0\17\56\1\111\6\56"+
    "\1\0\2\56\1\0\1\56\1\0\6\56\1\0\1\56"+
    "\1\145\1\60\3\56\1\66\4\56\1\71\4\56\1\67"+
    "\6\56\3\0\1\56\1\0\1\56\10\0\1\37\12\0"+
    "\1\56\1\70\2\56\1\70\12\56\1\67\6\56\1\0"+
    "\2\56\1\0\1\56\1\0\1\56\1\66\4\56\1\0"+
    "\1\56\1\146\1\60\14\56\1\146\1\111\6\56\3\0"+
    "\1\56\1\0\1\56\4\0\1\120\3\0\1\37\12\0"+
    "\17\56\1\111\6\56\1\0\2\56\1\0\1\56\1\0"+
    "\6\56\1\0\2\56\1\60\2\56\1\76\12\56\1\0"+
    "\1\76\5\56\3\0\1\56\1\0\1\56\1\0\1\77"+
    "\6\0\1\37\12\0\17\56\1\0\6\56\1\0\2\56"+
    "\1\0\1\56\1\0\6\56\1\0\1\56\1\146\1\60"+
    "\14\56\1\146\1\111\6\56\3\0\1\56\1\0\1\56"+
    "\10\0\1\37\12\0\17\56\1\111\6\56\1\0\2\56"+
    "\1\0\1\56\1\0\6\56\75\0\1\116\26\0\2\56"+
    "\1\60\15\56\1\0\6\56\3\0\1\56\1\0\1\56"+
    "\1\0\1\102\6\0\1\37\12\0\17\56\1\0\6\56"+
    "\1\0\2\56\1\0\1\56\1\0\6\56\1\0\2\56"+
    "\1\60\4\56\1\147\10\56\1\0\6\56\3\0\1\56"+
    "\1\0\1\56\10\0\1\37\12\0\15\56\1\147\1\56"+
    "\1\0\6\56\1\0\2\56\1\0\1\56\1\0\6\56"+
    "\1\0\2\56\1\60\15\56\1\0\6\56\3\0\1\56"+
    "\1\0\1\56\10\0\1\37\12\0\17\56\1\0\4\56"+
    "\1\150\1\56\1\0\2\56\1\0\1\56\1\0\6\56"+
    "\1\0\1\56\1\151\1\60\14\56\1\151\1\0\6\56"+
    "\3\0\1\56\1\0\1\56\10\0\1\37\12\0\17\56"+
    "\1\0\6\56\1\0\2\56\1\0\1\56\1\0\6\56"+
    "\1\0\2\152\1\0\24\152\3\0\1\152\1\0\1\152"+
    "\1\0\1\152\2\0\1\152\16\0\17\152\1\0\6\152"+
    "\1\0\2\152\1\0\1\152\1\0\6\152\1\0\2\56"+
    "\1\60\15\56\1\153\6\56\3\0\1\56\1\0\1\56"+
    "\10\0\1\37\12\0\17\56\1\0\6\56\1\0\2\56"+
    "\1\0\1\56\1\0\6\56\1\0\2\56\1\154\15\56"+
    "\1\153\6\56\3\0\1\56\1\0\1\56\10\0\1\37"+
    "\12\0\17\56\1\0\6\56\1\0\2\56\1\0\1\56"+
    "\1\0\6\56\1\0\2\155\1\0\15\155\1\0\6\155"+
    "\3\0\1\155\1\0\1\155\10\0\1\156\12\0\17\155"+
    "\1\0\6\155\1\0\2\155\1\0\1\155\1\0\6\155"+
    "\1\0\2\56\1\60\15\56\1\153\3\56\2\157\1\56"+
    "\3\0\1\56\1\0\1\56\10\0\1\37\12\0\17\56"+
    "\1\0\6\56\1\0\2\56\1\0\1\56\1\0\6\56"+
    "\1\0\2\56\1\60\12\56\1\160\2\56\1\153\1\56"+
    "\1\160\4\56\3\0\1\56\1\0\1\56\1\0\1\161"+
    "\6\0\1\37\12\0\17\56\1\0\6\56\1\0\2\56"+
    "\1\0\1\56\1\0\6\56\3\0\1\31\122\0\1\115"+
    "\120\0\1\56\1\57\1\60\15\56\1\153\6\56\3\0"+
    "\1\56\1\0\1\56\10\0\1\37\12\0\17\56\1\0"+
    "\6\56\1\0\2\56\1\0\1\56\1\0\6\56\1\0"+
    "\2\56\1\60\15\56\1\153\6\56\3\0\1\56\1\0"+
    "\1\56\1\0\1\162\6\0\1\37\12\0\17\56\1\0"+
    "\6\56\1\0\2\56\1\0\1\56\1\0\6\56\10\0"+
    "\1\163\65\0\1\163\7\0\1\164\11\0\1\164\3\0"+
    "\2\56\1\60\15\56\1\153\6\56\3\0\1\56\1\0"+
    "\1\56\1\0\1\165\6\0\1\37\12\0\17\56\1\0"+
    "\6\56\1\0\2\56\1\0\1\56\1\0\6\56\1\0"+
    "\2\56\1\60\15\56\1\166\6\56\3\0\1\56\1\0"+
    "\1\56\10\0\1\37\12\0\17\56\1\111\6\56\1\0"+
    "\2\56\1\0\1\56\1\0\6\56\1\0\2\155\1\0"+
    "\1\167\14\155\1\0\6\155\3\0\1\155\1\0\1\155"+
    "\10\0\1\156\12\0\17\155\1\0\6\155\1\0\2\155"+
    "\1\0\1\155\1\0\6\155\1\0\2\56\1\60\1\57"+
    "\14\56\1\153\6\56\3\0\1\56\1\0\1\56\10\0"+
    "\1\37\12\0\17\56\1\0\6\56\1\0\2\56\1\0"+
    "\1\56\1\0\6\56\1\0\2\56\1\60\12\56\1\71"+
    "\2\56\1\153\6\56\3\0\1\56\1\0\1\56\1\0"+
    "\1\170\6\0\1\37\12\0\17\56\1\0\6\56\1\0"+
    "\2\56\1\0\1\56\1\0\6\56\10\0\1\171\5\0"+
    "\2\111\104\0\2\56\1\60\15\56\1\153\6\56\3\0"+
    "\1\56\1\0\1\56\1\0\1\170\6\0\1\37\12\0"+
    "\17\56\1\0\6\56\1\0\2\56\1\0\1\56\1\0"+
    "\6\56\73\0\1\172\30\0\2\56\1\60\4\56\1\173"+
    "\10\56\1\153\6\56\3\0\1\56\1\0\1\56\4\0"+
    "\1\111\3\0\1\37\12\0\17\56\1\0\6\56\1\0"+
    "\2\56\1\0\1\56\1\0\6\56\1\0\2\155\1\0"+
    "\3\155\1\167\11\155\1\0\6\155\3\0\1\155\1\0"+
    "\1\155\10\0\1\156\12\0\17\155\1\0\6\155\1\0"+
    "\2\155\1\0\1\155\1\0\6\155\15\0\1\174\1\175"+
    "\1\174\3\0\1\175\100\0\2\56\1\60\10\56\1\57"+
    "\4\56\1\153\6\56\3\0\1\56\1\0\1\56\10\0"+
    "\1\37\12\0\17\56\1\0\6\56\1\0\2\56\1\0"+
    "\1\56\1\0\6\56\1\0\2\56\1\60\13\56\1\71"+
    "\1\56\1\153\6\56\3\0\1\56\1\0\1\56\10\0"+
    "\1\37\12\0\17\56\1\0\6\56\1\0\2\56\1\0"+
    "\1\56\1\0\6\56\1\0\2\56\1\60\15\56\1\153"+
    "\2\56\1\176\3\56\3\0\1\56\1\0\1\56\10\0"+
    "\1\37\12\0\17\56\1\0\6\56\1\0\2\56\1\0"+
    "\1\56\1\0\6\56\1\0\2\56\1\154\12\56\1\57"+
    "\2\56\1\153\6\56\3\0\1\56\1\0\1\56\10\0"+
    "\1\37\12\0\17\56\1\0\6\56\1\0\2\56\1\0"+
    "\1\56\1\0\6\56\1\0\2\56\1\60\2\56\1\177"+
    "\12\56\1\153\1\177\5\56\3\0\1\56\1\0\1\56"+
    "\10\0\1\37\12\0\17\56\1\0\6\56\1\0\2\56"+
    "\1\0\1\56\1\0\6\56\1\0\2\56\1\154\7\56"+
    "\1\57\5\56\1\153\6\56\3\0\1\56\1\0\1\56"+
    "\10\0\1\37\12\0\17\56\1\0\6\56\1\0\2\56"+
    "\1\0\1\56\1\0\6\56\1\0\2\56\1\60\2\56"+
    "\1\200\12\56\1\153\1\200\5\56\3\0\1\56\1\0"+
    "\1\56\10\0\1\37\12\0\17\56\1\0\6\56\1\0"+
    "\2\56\1\0\1\56\1\0\6\56\1\0\2\56\1\60"+
    "\6\56\1\57\6\56\1\153\6\56\3\0\1\56\1\0"+
    "\1\56\10\0\1\37\12\0\17\56\1\0\6\56\1\0"+
    "\2\56\1\0\1\56\1\0\6\56\1\0\2\155\1\0"+
    "\12\155\1\201\2\155\1\0\6\155\3\0\1\155\1\0"+
    "\1\155\10\0\1\156\12\0\17\155\1\0\6\155\1\0"+
    "\2\155\1\0\1\155\1\0\6\155\10\0\1\202\26\0"+
    "\1\111\64\0\1\201\1\155\1\0\15\155\1\0\6\155"+
    "\3\0\1\155\1\0\1\155\10\0\1\156\12\0\17\155"+
    "\1\0\6\155\1\0\2\155\1\0\1\155\1\0\6\155"+
    "\3\203\1\204\15\203\1\204\6\203\3\204\1\203\1\204"+
    "\1\203\4\204\2\203\1\204\4\203\4\204\2\203\2\204"+
    "\42\203\1\0\2\56\1\60\12\56\1\57\2\56\1\153"+
    "\6\56\3\0\1\56\1\0\1\56\10\0\1\37\12\0"+
    "\17\56\1\0\6\56\1\0\2\56\1\0\1\56\1\0"+
    "\6\56\1\0\2\56\1\60\13\56\1\103\1\56\1\153"+
    "\6\56\3\0\1\56\1\0\1\56\10\0\1\37\12\0"+
    "\17\56\1\0\6\56\1\0\2\56\1\0\1\56\1\0"+
    "\6\56\32\0\1\115\71\0\2\56\1\205\15\56\1\153"+
    "\6\56\3\0\1\56\1\0\1\56\10\0\1\37\12\0"+
    "\17\56\1\0\6\56\1\0\2\56\1\0\1\56\1\0"+
    "\6\56\24\0\1\206\143\0\1\31\56\0\2\127\1\60"+
    "\15\127\1\0\6\127\3\0\1\127\1\0\1\127\10\0"+
    "\1\37\12\0\17\127\1\0\6\127\1\0\2\127\1\0"+
    "\1\127\1\0\6\127\1\0\1\207\3\0\1\207\7\0"+
    "\1\207\2\0\1\207\1\0\2\207\1\0\1\207\1\0"+
    "\1\207\3\0\1\207\25\0\4\207\5\0\1\207\1\0"+
    "\1\207\1\0\2\207\2\0\1\207\10\0\1\207\1\0"+
    "\6\207\10\0\1\210\116\0\1\211\53\0\1\212\10\0"+
    "\1\213\41\0\1\214\121\0\1\215\1\0\1\216\171\0"+
    "\1\212\20\0\1\217\30\0\1\220\1\0\1\221\115\0"+
    "\1\222\5\0\1\223\1\133\1\224\1\0\1\225\5\0"+
    "\1\136\44\0\1\140\1\0\1\226\5\0\1\227\2\0"+
    "\1\230\20\0\1\231\131\0\1\232\113\0\1\233\55\0"+
    "\1\212\10\0\1\144\33\0\1\234\121\0\27\235\1\0"+
    "\1\235\1\0\1\235\1\0\1\235\1\0\1\235\6\0"+
    "\1\236\1\235\1\0\1\235\2\0\1\235\4\0\17\235"+
    "\1\0\11\235\1\0\1\235\1\0\6\235\1\0\2\56"+
    "\1\60\15\56\1\153\6\56\3\0\1\56\1\0\1\56"+
    "\10\0\1\37\12\0\12\56\1\71\4\56\1\0\6\56"+
    "\1\0\2\56\1\0\1\56\1\0\6\56\1\0\2\56"+
    "\1\60\15\56\1\153\6\56\3\0\1\56\1\0\1\56"+
    "\1\0\1\237\6\0\1\37\12\0\17\56\1\0\6\56"+
    "\1\0\2\56\1\0\1\56\1\0\6\56\1\0\2\56"+
    "\1\60\5\56\1\240\7\56\1\153\6\56\3\0\1\56"+
    "\1\0\1\56\10\0\1\37\12\0\17\56\1\0\1\56"+
    "\1\240\4\56\1\0\2\56\1\0\1\56\1\0\6\56"+
    "\1\0\2\56\1\60\15\56\1\153\6\56\3\0\1\56"+
    "\1\0\1\56\10\0\1\37\12\0\17\56\1\0\4\56"+
    "\1\241\1\56\1\0\2\56\1\0\1\56\1\0\6\56"+
    "\1\0\2\56\1\60\15\56\1\153\3\56\2\242\1\56"+
    "\3\0\1\56\1\0\1\56\10\0\1\37\12\0\17\56"+
    "\1\0\6\56\1\0\2\56\1\0\1\56\1\0\6\56"+
    "\1\0\2\152\1\0\24\152\3\0\1\152\1\0\1\152"+
    "\1\0\1\152\2\0\1\152\16\0\17\152\1\0\6\152"+
    "\1\0\2\152\1\0\1\152\1\243\6\152\16\0\1\244"+
    "\105\0\2\245\1\0\15\245\1\0\6\245\3\0\1\245"+
    "\1\0\1\245\10\0\1\246\12\0\17\245\1\0\6\245"+
    "\1\0\2\245\1\247\1\245\1\0\6\245\36\0\1\155"+
    "\65\0\2\56\1\60\15\56\1\153\6\56\3\0\1\56"+
    "\1\0\1\56\10\0\1\37\12\0\14\56\1\250\1\56"+
    "\1\250\1\0\6\56\1\0\2\56\1\0\1\56\1\0"+
    "\6\56\1\0\2\56\1\60\15\56\1\153\6\56\3\0"+
    "\1\56\1\0\1\56\1\0\1\251\6\0\1\37\12\0"+
    "\17\56\1\0\6\56\1\0\2\56\1\0\1\56\1\0"+
    "\6\56\11\0\1\252\70\0\1\252\21\0\1\253\11\0"+
    "\1\253\55\0\2\254\41\0\1\255\70\0\1\255\22\0"+
    "\1\256\15\0\1\256\173\0\2\257\31\0\2\245\1\115"+
    "\15\245\1\0\6\245\3\0\1\245\1\0\1\245\10\0"+
    "\1\246\12\0\17\245\1\0\6\245\1\0\2\245\1\247"+
    "\1\245\1\0\6\245\10\0\1\260\1\0\1\261\3\0"+
    "\1\262\4\0\1\262\51\0\1\263\1\260\1\263\4\0"+
    "\1\264\6\0\1\261\1\0\1\264\31\0\1\111\112\0"+
    "\1\265\107\0\2\56\1\60\15\56\1\153\6\56\3\0"+
    "\1\56\1\0\1\56\4\0\1\111\3\0\1\37\12\0"+
    "\17\56\1\0\6\56\1\0\2\56\1\0\1\56\1\0"+
    "\6\56\7\0\1\266\106\0\1\266\31\0\2\267\75\0"+
    "\2\56\1\60\15\56\1\153\6\56\3\0\1\56\1\0"+
    "\1\56\10\0\1\37\12\0\17\56\1\0\1\270\5\56"+
    "\1\0\2\56\1\0\1\56\1\0\6\56\1\0\2\56"+
    "\1\60\15\56\1\153\6\56\3\0\1\56\1\0\1\56"+
    "\1\0\1\271\6\0\1\37\12\0\17\56\1\0\6\56"+
    "\1\0\2\56\1\0\1\56\1\0\6\56\1\0\2\56"+
    "\1\60\15\56\1\153\2\56\1\272\2\56\1\272\3\0"+
    "\1\56\1\0\1\56\10\0\1\37\12\0\17\56\1\0"+
    "\6\56\1\0\2\56\1\0\1\56\1\0\6\56\1\0"+
    "\2\245\1\0\10\245\1\273\4\245\1\0\6\245\3\0"+
    "\1\245\1\0\1\245\10\0\1\246\12\0\17\245\1\0"+
    "\6\245\1\0\2\245\1\247\1\245\1\0\6\245\37\0"+
    "\1\111\63\0\123\203\1\0\2\155\1\0\1\155\1\274"+
    "\13\155\1\0\6\155\3\0\1\155\1\0\1\155\10\0"+
    "\1\156\12\0\17\155\1\0\6\155\1\0\2\155\1\0"+
    "\1\155\1\0\6\155\65\0\1\275\36\0\1\276\3\0"+
    "\1\276\7\0\1\276\2\0\1\276\1\0\2\276\1\0"+
    "\1\276\1\0\1\276\3\0\1\276\25\0\4\276\5\0"+
    "\1\276\1\0\1\276\1\0\2\276\2\0\1\276\10\0"+
    "\1\276\1\0\6\276\101\0\1\277\101\0\1\212\43\0"+
    "\27\235\1\0\1\235\1\0\1\235\1\0\1\235\1\0"+
    "\1\235\6\0\1\236\1\235\1\0\1\235\2\0\1\235"+
    "\3\0\1\212\17\235\1\0\11\235\1\0\1\235\1\0"+
    "\6\235\101\0\1\300\31\0\1\301\151\0\1\302\72\0"+
    "\1\303\1\304\215\0\1\305\43\0\1\306\106\0\1\307"+
    "\116\0\1\211\53\0\1\212\10\0\1\211\40\0\1\215"+
    "\1\0\1\211\171\0\1\212\20\0\1\310\32\0\1\311"+
    "\113\0\1\233\55\0\1\212\44\0\1\312\213\0\1\313"+
    "\137\0\1\213\21\0\1\314\121\0\1\315\115\0\27\235"+
    "\1\0\1\235\1\0\1\235\1\0\1\235\1\0\1\235"+
    "\6\0\1\236\1\235\1\0\1\235\2\0\1\235\3\0"+
    "\1\316\17\235\1\0\11\235\1\0\1\235\1\0\6\235"+
    "\36\0\1\235\171\0\1\317\14\0\1\317\1\0\2\56"+
    "\1\60\2\56\1\320\12\56\1\153\1\320\5\56\3\0"+
    "\1\56\1\0\1\56\10\0\1\37\12\0\17\56\1\0"+
    "\6\56\1\0\2\56\1\0\1\56\1\0\6\56\1\0"+
    "\2\321\1\60\15\321\1\153\6\321\3\0\1\321\1\0"+
    "\1\321\10\0\1\322\12\0\17\321\1\0\6\321\1\0"+
    "\2\321\1\0\1\321\1\0\6\321\1\0\2\56\1\60"+
    "\15\56\1\153\6\56\3\0\1\56\1\0\1\56\1\0"+
    "\1\323\6\0\1\37\12\0\17\56\1\0\6\56\1\0"+
    "\2\56\1\0\1\56\1\0\6\56\1\0\2\245\1\60"+
    "\15\245\1\0\6\245\3\0\1\245\1\0\1\245\10\0"+
    "\1\246\12\0\17\245\1\0\6\245\1\0\2\245\1\247"+
    "\1\245\1\0\6\245\36\0\1\245\65\0\2\324\1\0"+
    "\15\324\1\0\6\324\3\0\1\324\1\0\1\324\10\0"+
    "\1\325\12\0\17\324\1\0\6\324\1\0\2\324\1\0"+
    "\1\324\1\0\6\324\1\0\2\56\1\60\15\56\1\153"+
    "\6\56\3\0\1\56\1\0\1\56\1\0\1\326\6\0"+
    "\1\37\12\0\17\56\1\0\6\56\1\0\2\56\1\0"+
    "\1\56\1\0\6\56\15\0\1\327\1\0\1\327\121\0"+
    "\1\330\4\0\1\330\113\0\1\331\57\0\1\331\42\0"+
    "\1\332\57\0\1\332\123\0\1\333\1\0\1\333\50\0"+
    "\2\334\110\0\1\335\57\0\1\335\37\0\1\336\70\0"+
    "\1\336\22\0\1\337\15\0\1\337\104\0\1\340\15\0"+
    "\1\340\166\0\1\336\2\0\1\336\42\0\1\341\15\0"+
    "\2\342\67\0\1\341\25\0\1\111\56\0\1\111\32\0"+
    "\1\343\65\0\1\343\57\0\1\344\45\0\1\344\22\0"+
    "\2\56\1\60\15\56\1\153\6\56\3\0\1\56\1\0"+
    "\1\56\10\0\1\37\3\0\1\345\6\0\17\56\1\0"+
    "\6\56\1\0\2\56\1\0\1\56\1\0\6\56\10\0"+
    "\1\346\65\0\1\346\25\0\2\56\1\60\15\56\1\153"+
    "\6\56\3\0\1\56\1\0\1\56\1\0\1\347\6\0"+
    "\1\37\12\0\17\56\1\0\6\56\1\0\2\56\1\0"+
    "\1\56\1\0\6\56\1\0\2\245\1\154\15\245\1\0"+
    "\6\245\3\0\1\245\1\0\1\245\10\0\1\246\12\0"+
    "\17\245\1\0\6\245\1\0\2\245\1\247\1\245\1\0"+
    "\6\245\11\0\1\350\12\0\1\351\12\0\1\352\135\0"+
    "\1\353\107\0\1\354\11\0\1\211\6\0\1\212\66\0"+
    "\1\355\171\0\1\211\35\0\1\356\124\0\1\357\207\0"+
    "\1\211\51\0\1\211\110\0\1\360\211\0\1\211\30\0"+
    "\1\361\1\304\222\0\1\211\20\0\1\362\222\0\1\211"+
    "\33\0\1\211\112\0\1\363\123\0\1\364\65\0\1\364"+
    "\25\0\2\56\1\60\15\56\1\153\6\56\3\0\1\56"+
    "\1\0\1\56\1\0\1\365\6\0\1\37\12\0\17\56"+
    "\1\0\6\56\1\0\2\56\1\0\1\56\1\0\6\56"+
    "\1\0\2\321\1\366\15\321\1\153\6\321\3\0\1\321"+
    "\1\0\1\321\10\0\1\322\12\0\17\321\1\0\6\321"+
    "\1\0\2\321\1\0\1\321\1\0\6\321\36\0\1\367"+
    "\175\0\1\370\7\0\1\370\2\0\2\324\1\371\15\324"+
    "\1\0\6\324\3\0\1\324\1\0\1\324\10\0\1\325"+
    "\12\0\17\324\1\0\6\324\1\0\2\324\1\0\1\324"+
    "\1\0\6\324\36\0\1\324\70\0\1\372\112\0\1\372"+
    "\5\0\1\373\15\0\1\373\43\0\1\373\2\0\1\373"+
    "\72\0\1\251\65\0\1\260\15\0\1\260\112\0\1\374"+
    "\65\0\1\374\121\0\1\375\1\0\1\375\62\0\1\376"+
    "\73\0\1\377\65\0\1\377\42\0\1\u0100\4\0\1\u0100"+
    "\105\0\1\u0101\13\0\1\u0101\175\0\1\u0100\1\0\1\u0100"+
    "\33\0\1\u0102\65\0\1\u0102\31\0\1\u0100\65\0\1\u0100"+
    "\124\0\1\u0103\1\0\1\u0103\56\0\1\u0104\45\0\1\u0104"+
    "\72\0\1\u0105\110\0\1\u0106\65\0\1\u0107\15\0\1\u0107"+
    "\121\0\1\u0108\117\0\1\u0109\124\0\1\u010a\5\0\1\u010b"+
    "\171\0\1\u010c\40\0\1\u010d\120\0\1\u010e\224\0\1\u010f"+
    "\20\0\1\211\123\0\1\u0110\121\0\1\u0111\124\0\1\u0112"+
    "\217\0\1\u0103\11\0\1\u0103\35\0\1\u0113\45\0\1\u0113"+
    "\22\0\2\u0114\1\0\15\u0114\1\0\6\u0114\3\0\1\u0114"+
    "\1\0\1\u0114\10\0\1\u0115\12\0\17\u0114\1\0\6\u0114"+
    "\1\0\2\u0114\1\0\1\u0114\1\0\6\u0114\1\0\2\367"+
    "\1\366\15\367\1\0\6\367\3\0\1\367\1\0\1\367"+
    "\10\0\1\322\12\0\17\367\1\0\6\367\1\0\2\367"+
    "\1\0\1\367\1\0\6\367\75\0\1\u0116\1\0\1\u0116"+
    "\24\0\2\u0117\1\0\15\u0117\1\0\6\u0117\3\0\1\u0117"+
    "\1\0\1\u0117\10\0\1\u0118\12\0\17\u0117\1\0\6\u0117"+
    "\1\0\2\u0117\1\0\1\u0117\1\0\6\u0117\2\0\1\u0100"+
    "\15\0\1\u0100\113\0\1\u0119\70\0\1\u0119\26\0\1\u011a"+
    "\13\0\1\u011a\107\0\1\u011b\106\0\1\u011b\115\0\1\u011c"+
    "\7\0\1\u011c\7\0\1\u011d\13\0\1\u011d\104\0\1\u0100"+
    "\112\0\1\u0100\10\0\1\u011e\65\0\1\u011e\31\0\1\u011f"+
    "\15\0\1\u011f\153\0\1\u0120\56\0\1\u0121\65\0\1\u0121"+
    "\133\0\1\u0103\10\0\1\u0103\16\0\1\u0122\4\0\1\u0123"+
    "\114\0\1\u0124\123\0\1\u0125\201\0\1\u0126\41\0\1\u0127"+
    "\115\0\1\304\215\0\1\u0128\34\0\1\u0129\224\0\1\u012a"+
    "\22\0\1\u012b\115\0\1\u012c\130\0\1\317\100\0\1\317"+
    "\10\0\2\u012d\1\u012e\15\u012d\1\0\6\u012d\3\0\1\u012d"+
    "\1\0\1\u012d\10\0\1\u012f\12\0\17\u012d\1\0\6\u012d"+
    "\1\0\2\u012d\1\247\1\u012d\1\0\6\u012d\36\0\1\u0114"+
    "\66\0\1\u0130\15\0\1\u0130\140\0\1\u0117\110\0\1\u0131"+
    "\2\0\1\u0131\101\0\1\u0100\13\0\1\u0100\102\0\1\u0132"+
    "\15\0\1\u0132\177\0\1\u0133\1\0\1\u0133\31\0\1\u0134"+
    "\13\0\1\u0134\114\0\1\u0100\57\0\1\u0100\44\0\1\u0135"+
    "\4\0\1\u0135\100\0\2\u0136\1\0\15\u0136\1\0\6\u0136"+
    "\3\0\1\u0136\1\0\1\u0136\10\0\1\u0137\12\0\17\u0136"+
    "\1\0\6\u0136\1\0\2\u0136\1\0\1\u0136\1\0\6\u0136"+
    "\63\0\1\u0138\2\0\1\u0138\127\0\1\u0139\36\0\1\u0126"+
    "\121\0\1\u0126\124\0\1\u013a\130\0\1\u013b\177\0\1\u013c"+
    "\35\0\1\u013d\123\0\1\u013e\117\0\1\304\213\0\1\u013f"+
    "\26\0\2\u012d\1\366\15\u012d\1\0\6\u012d\3\0\1\u012d"+
    "\1\0\1\u012d\10\0\1\u012f\12\0\17\u012d\1\0\6\u012d"+
    "\1\0\2\u012d\1\247\1\u012d\1\0\6\u012d\1\0\2\u0140"+
    "\1\0\15\u0140\1\0\6\u0140\3\0\1\u0140\1\0\1\u0140"+
    "\10\0\1\u0141\12\0\17\u0140\1\0\6\u0140\1\0\2\u0140"+
    "\1\0\1\u0140\1\0\6\u0140\36\0\1\u012d\171\0\1\u0142"+
    "\14\0\1\u0142\7\0\1\u0100\106\0\1\u0100\15\0\1\340"+
    "\70\0\1\340\22\0\1\u0143\15\0\1\u0143\141\0\1\u0144"+
    "\72\0\1\u0103\106\0\1\u0103\5\0\2\u0136\1\u012e\15\u0136"+
    "\1\0\6\u0136\3\0\1\u0136\1\0\1\u0136\10\0\1\u0137"+
    "\12\0\17\u0136\1\0\6\u0136\1\0\2\u0136\1\0\1\u0136"+
    "\1\0\6\u0136\36\0\1\u0136\74\0\1\u0145\65\0\1\u0145"+
    "\121\0\1\u0123\120\0\1\u0126\42\0\1\u0146\156\0\1\u0147"+
    "\162\0\1\u0148\21\0\1\u0149\153\0\1\u014a\64\0\2\u0140"+
    "\1\u012e\15\u0140\1\0\6\u0140\3\0\1\u0140\1\0\1\u0140"+
    "\10\0\1\u0141\12\0\17\u0140\1\0\6\u0140\1\0\2\u0140"+
    "\1\0\1\u0140\1\0\6\u0140\36\0\1\u0140\123\0\1\u014b"+
    "\170\0\1\u0103\14\0\1\u0103\16\0\1\u0132\4\0\1\u0132"+
    "\105\0\1\u014c\13\0\1\u014c\147\0\1\u014d\74\0\1\u014e"+
    "\32\0\1\u014e\72\0\1\u014f\205\0\1\u0150\25\0\1\u0151"+
    "\215\0\1\u0152\14\0\1\u0152\104\0\1\u0153\10\0\1\u0153"+
    "\26\0\1\u0154\32\0\1\u0154\57\0\1\u0155\57\0\1\u0156"+
    "\57\0\1\u0157\120\0\1\u0158\106\0\1\u0159\126\0\1\u015a"+
    "\57\0\1\u015a\110\0\1\u0100\2\0\1\u0100\41\0\1\u015b"+
    "\2\0\1\u015c\2\0\1\u015d\1\u015e\2\0\1\u015f\1\0"+
    "\1\u0160\3\0\1\u0161\44\0\1\u0162\3\0\1\u0163\6\0"+
    "\1\u0164\1\u0165\41\0\1\u0166\100\0\1\u0166\126\0\1\u0167"+
    "\142\0\1\u0168\171\0\1\u0169\35\0\1\u016a\65\0\1\u016a"+
    "\33\0\1\u016b\2\0\1\u016c\205\0\1\u016d\35\0\1\u016e"+
    "\114\0\1\u016f\221\0\1\u0170\33\0\1\u0171\120\0\1\u0172"+
    "\123\0\1\u0173\113\0\1\u0174\126\0\1\u0175\123\0\1\u0176"+
    "\134\0\1\211\32\0\1\211\143\0\1\144\33\0\1\304"+
    "\120\0\1\u0177\142\0\1\u0178\2\0\1\u0178\101\0\1\u0179"+
    "\116\0\1\u017a\124\0\1\u017b\142\0\1\u017c\173\0\1\u017d"+
    "\35\0\1\u017e\205\0\1\u017f\120\0\1\u0180\122\0\1\u0181"+
    "\55\0\1\u0182\105\0\1\u0183\125\0\1\u0184\157\0\1\u0185"+
    "\112\0\1\u0186\102\0\1\u0187\121\0\1\u0188\116\0\1\u0189"+
    "\121\0\1\u018a\135\0\1\u018b\173\0\1\u018c\64\0\1\u018d"+
    "\75\0\1\u0182\122\0\1\u018e\117\0\1\u018e\210\0\1\u018f"+
    "\43\0\1\u0190\125\0\1\u0191\32\0\1\u0191\57\0\1\u0192"+
    "\70\0\1\u0192\30\0\1\u0193\130\0\1\u0194\115\0\1\u0195"+
    "\206\0\1\u018e\35\0\1\u0196\123\0\1\u0184\213\0\1\u0197"+
    "\41\0\1\u0198\32\0\1\u0198\61\0\1\u0190\123\0\1\u018e"+
    "\115\0\1\u0199\2\0\1\u019a\71\0\1\u019b\55\0\1\u019c"+
    "\160\0\1\u019d\35\0\1\u019e\130\0\1\u019f\117\0\1\u01a0"+
    "\115\0\1\u018c\165\0\1\211\146\0\1\u0166\35\0\1\u0166"+
    "\120\0\1\u0166\131\0\1\174\1\0\1\174\124\0\1\u0198"+
    "\15\0\1\u01a1\14\0\1\u0198\54\0\1\u01a2\130\0\1\u019d"+
    "\132\0\1\u01a3\122\0\1\u01a4\204\0\1\u018e\123\0\1\u01a5"+
    "\22\0\1\u01a6\124\0\1\u01a7\214\0\1\u01a8\114\0\1\u01a9"+
    "\51\0\1\u018e\202\0\1\u01aa\20\0\1\u018e\120\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[34113];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\27\1\1\11\4\1\4\0\6\1\1\0\4\1"+
    "\1\0\2\1\1\0\2\1\2\0\5\1\1\0\4\1"+
    "\1\0\1\1\2\0\6\1\1\11\2\1\1\0\1\11"+
    "\2\0\3\1\1\0\1\1\20\0\5\1\2\0\1\1"+
    "\2\0\2\1\5\0\1\1\4\0\1\1\2\0\3\1"+
    "\2\0\1\1\6\0\1\11\25\0\3\1\2\11\3\0"+
    "\1\1\17\0\1\1\1\0\1\1\1\0\2\1\20\0"+
    "\1\11\1\0\2\1\31\0\1\11\24\0\1\11\2\0"+
    "\1\11\4\0\1\1\13\0\1\1\2\0\1\1\2\0"+
    "\1\1\13\0\1\11\6\0\1\1\13\0\1\1\6\0"+
    "\1\1\1\0\1\1\150\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[426];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

    public final int yychar() {
        return yychar;
    }

    public final String getText() {
        return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public IrishTokeniserImpl(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public IrishTokeniserImpl(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 690) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int getNextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 4: 
          { return 3;
          }
        case 16: break;
        case 1: 
          { return 0;
          }
        case 17: break;
        case 8: 
          { return 12 ;
          }
        case 18: break;
        case 15: 
          { return 8;
          }
        case 19: break;
        case 10: 
          { return 13 ;
          }
        case 20: break;
        case 2: 
          { return 5;
          }
        case 21: break;
        case 5: 
          { return 2;
          }
        case 22: break;
        case 13: 
          { return 14 ;
          }
        case 23: break;
        case 9: 
          { return 10 ;
          }
        case 24: break;
        case 7: 
          { return 7;
          }
        case 25: break;
        case 3: 
          { return 4;
          }
        case 26: break;
        case 14: 
          { return 15 ;
          }
        case 27: break;
        case 12: 
          { return 1;
          }
        case 28: break;
        case 6: 
          { return 11 ;
          }
        case 29: break;
        case 11: 
          { return 9 ;
          }
        case 30: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                return -1;
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
