/* The following code was generated by JFlex 1.4.3 on 05/10/16 18:01 */

/*
 * Copyright 2016 Trinity College, Dublin
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
package ie.tcd.slscs.tokeniser.ga;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 05/10/16 18:01 from the specification file
 * <tt>c:/msys32/home/Abair/IrishTokeniser/src/main/jflex/irish.jflex</tt>
 */
public final class IrishTokeniserImpl {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\0\1\0\25\0\1\36\1\34\1\51\1\34\2\0\1\34"+
    "\1\21\1\34\1\34\1\46\1\0\1\40\1\41\1\3\1\47\12\0"+
    "\1\50\1\34\1\54\1\45\1\55\1\31\1\0\1\64\1\60\1\1"+
    "\1\5\3\56\1\62\1\70\3\56\1\15\1\65\1\20\1\33\1\56"+
    "\1\22\1\23\1\27\1\25\5\56\1\30\1\0\1\32\1\0\1\75"+
    "\1\37\1\10\1\57\1\13\1\61\1\7\1\72\1\4\1\14\1\11"+
    "\1\35\1\77\1\12\1\17\1\63\1\2\1\67\1\35\1\6\1\16"+
    "\1\24\1\26\1\76\1\73\1\71\1\74\1\35\1\34\1\0\1\34"+
    "\1\34\42\0\1\34\1\0\1\53\2\0\1\44\2\0\1\34\1\0"+
    "\1\34\1\34\1\0\1\34\1\34\1\34\1\34\1\34\1\34\1\0"+
    "\1\34\1\0\1\34\1\0\1\34\1\34\1\34\1\34\1\34\1\34"+
    "\1\34\1\0\1\56\1\52\1\0\5\0\1\56\3\0\1\56\5\0"+
    "\1\56\3\0\1\34\2\0\1\56\6\0\1\35\1\42\6\0\1\35"+
    "\3\0\1\35\5\0\1\35\4\0\1\34\1\0\1\35\66\0\1\34"+
    "\41\0\1\44\76\0\1\34\u0147\0\1\34\1\0\1\44\264\0\1\34"+
    "\1\34\1\34\1\34\1\34\1\34\1\34\1\34\1\34\1\34\1\34"+
    "\1\34\1\34\1\34\1\34\1\34\1\34\1\0\1\34\1\34\1\34"+
    "\1\34\1\34\1\34\1\34\7\0\1\34\1\34\1\34\1\34\1\34"+
    "\1\34\1\34\1\34\1\34\1\34\1\34\1\34\1\34\1\34\1\34"+
    "\1\34\1\34\1\34\1\34\1\34\1\34\1\34\1\34\1\34\1\34"+
    "\7\0\1\34\u0116\0\1\34\u1b37\0\1\34\1\0\1\34\3\0\1\34"+
    "\11\0\1\34\23\0\1\34\147\0\1\43\150\0\1\34\14\0\1\66"+
    "\3\0\1\34\54\0\1\34\1\34\74\0\1\34\1\34\1\34\1\34"+
    "\1\34\1\34\1\34\1\34\1\34\17\0\1\34\1\34\47\0\1\34"+
    "\1\0\1\34\53\0\1\34\1\0\1\34\3\0\1\34\10\0\1\34"+
    "\1\0\1\34\3\0\1\34\4\0\1\34\2\0\1\34\1\34\1\0"+
    "\1\34\6\0\1\34\1\0\1\34\1\34\11\0\1\34\23\0\1\34"+
    "\27\0\1\34\1\34\2\0\1\34\1\34\u01fa\0\1\34\1\34\1\34"+
    "\1\34\1\34\1\34\1\34\1\34\1\34\1\34\1\34\1\34\1\34"+
    "\1\34\1\34\1\34\1\34\1\34\1\34\1\34\u0142\0\1\34\5\0"+
    "\1\34\3\0\1\34\223\0\1\34\1\34\1\34\4\0\1\34\1\34"+
    "\3\0\1\34\2\0\1\34\1\0\1\34\1\34\255\0\1\34\3\0"+
    "\1\34\205\0\1\34\2\0\1\34\u0192\0\1\34\1\34\u01cf\0\1\34"+
    "\1\34\1\34\u0658\0\1\34\uce9c\0\1\44\2\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\12\1\1\2\5\1\2\2\1\1"+
    "\1\3\2\2\3\0\1\2\4\1\2\0\1\4\2\0"+
    "\2\1\1\4\2\0\1\1\1\0\5\1\1\0\1\5"+
    "\2\0\2\1\1\0\1\1\15\0\1\1\4\0\1\1"+
    "\7\0\1\6\33\0\1\7\155\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[223];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\300\0\u0100\0\u0140\0\u0180\0\u01c0"+
    "\0\u0200\0\u0240\0\u0280\0\u02c0\0\u0300\0\u0340\0\u0380\0\u03c0"+
    "\0\u0400\0\u0440\0\u0480\0\u04c0\0\u0500\0\u0540\0\u0580\0\u0540"+
    "\0\u05c0\0\u0600\0\u0640\0\u0680\0\u06c0\0\u0700\0\u0740\0\u0780"+
    "\0\u07c0\0\u0800\0\u0840\0\u0880\0\u0540\0\u08c0\0\u0900\0\u0940"+
    "\0\u0980\0\u09c0\0\u0a00\0\u0a40\0\u0a80\0\u0ac0\0\u0b00\0\u0b40"+
    "\0\u0b80\0\u0bc0\0\u0c00\0\u0c40\0\u0540\0\u0c80\0\u0cc0\0\u0d00"+
    "\0\u0d40\0\u0d80\0\u0dc0\0\u0e00\0\u0e40\0\u0e80\0\u0ec0\0\u0f00"+
    "\0\u0f40\0\u0f80\0\u0fc0\0\u1000\0\u1040\0\u1080\0\u10c0\0\u1100"+
    "\0\u1140\0\u1180\0\u11c0\0\u1200\0\u1240\0\u1280\0\u12c0\0\u1300"+
    "\0\u1340\0\u1380\0\u13c0\0\u1400\0\u1440\0\u0540\0\u1480\0\u14c0"+
    "\0\u1500\0\u1540\0\u1580\0\u15c0\0\u1600\0\u1640\0\u1680\0\u16c0"+
    "\0\u1700\0\u1740\0\u1780\0\u17c0\0\u1800\0\u1840\0\u1880\0\u18c0"+
    "\0\u1900\0\u1940\0\u1980\0\u19c0\0\u1a00\0\u1a40\0\u1a80\0\u1ac0"+
    "\0\u1b00\0\u0540\0\u1b40\0\u1b80\0\u1bc0\0\u1c00\0\u1c40\0\u1c80"+
    "\0\u1cc0\0\u1d00\0\u1d40\0\u1d80\0\u1dc0\0\u1e00\0\u1e40\0\u1e80"+
    "\0\u1ec0\0\u1f00\0\u1f40\0\u1f80\0\u1fc0\0\u2000\0\u2040\0\u2080"+
    "\0\u20c0\0\u2100\0\u2140\0\u2180\0\u21c0\0\u2200\0\u2240\0\u2280"+
    "\0\u22c0\0\u2300\0\u2340\0\u2380\0\u23c0\0\u2400\0\u2440\0\u2480"+
    "\0\u24c0\0\u2500\0\u2540\0\u2580\0\u25c0\0\u2600\0\u2640\0\u2680"+
    "\0\u26c0\0\u2700\0\u2740\0\u2780\0\u27c0\0\u2800\0\u2840\0\u2880"+
    "\0\u28c0\0\u2900\0\u2940\0\u2980\0\u29c0\0\u2a00\0\u2a40\0\u2a80"+
    "\0\u2ac0\0\u2b00\0\u2b40\0\u2b80\0\u2bc0\0\u2c00\0\u2c40\0\u2c80"+
    "\0\u2cc0\0\u2d00\0\u2d40\0\u2d80\0\u2dc0\0\u2e00\0\u2e40\0\u2e80"+
    "\0\u2ec0\0\u2f00\0\u2f40\0\u2f80\0\u2fc0\0\u3000\0\u3040\0\u3080"+
    "\0\u30c0\0\u3100\0\u3140\0\u3180\0\u31c0\0\u3200\0\u3240\0\u3280"+
    "\0\u32c0\0\u3300\0\u3340\0\u3380\0\u33c0\0\u3400\0\u3440\0\u3480"+
    "\0\u34c0\0\u3500\0\u3540\0\u3580\0\u35c0\0\u3600\0\u3640";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[223];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\2\1\3\1\4\1\5\1\6\1\3\1\7"+
    "\1\10\1\11\1\12\2\3\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\3\1\22\1\23\1\24\1\25"+
    "\2\26\1\27\1\26\1\3\1\30\1\31\1\32\1\26"+
    "\1\33\1\26\2\0\1\34\3\26\1\35\1\0\1\36"+
    "\1\26\1\3\2\37\1\40\1\3\1\37\1\41\1\37"+
    "\1\0\6\3\1\0\2\3\1\0\1\3\1\42\1\0"+
    "\15\3\1\0\6\3\3\0\1\3\1\0\1\3\20\0"+
    "\10\3\1\0\6\3\1\0\2\3\1\0\2\3\1\0"+
    "\15\3\1\0\6\3\3\0\1\3\1\0\1\3\20\0"+
    "\10\3\1\0\6\3\1\0\2\3\3\0\1\43\5\0"+
    "\1\44\67\0\1\2\1\3\1\0\15\3\1\0\6\3"+
    "\3\0\1\3\1\0\1\3\20\0\10\3\1\0\6\3"+
    "\1\0\2\3\1\0\2\3\1\0\2\3\1\42\12\3"+
    "\1\45\6\3\3\0\1\3\1\0\1\3\4\0\1\46"+
    "\13\0\4\3\1\37\3\3\1\0\6\3\1\0\2\3"+
    "\1\0\2\3\1\47\4\3\1\50\10\3\1\0\6\3"+
    "\3\0\1\3\1\0\1\3\20\0\10\3\1\0\6\3"+
    "\1\0\2\3\1\0\2\3\1\0\2\3\1\51\12\3"+
    "\1\52\6\3\3\0\1\3\1\0\1\3\1\53\3\0"+
    "\1\54\13\0\5\3\1\55\2\3\1\0\6\3\1\0"+
    "\2\3\1\0\2\3\1\56\15\3\1\0\6\3\3\0"+
    "\1\3\1\0\1\3\20\0\10\3\1\0\6\3\1\0"+
    "\2\3\1\0\2\3\1\0\1\57\2\3\1\60\3\3"+
    "\1\57\5\3\1\0\6\3\3\0\1\3\1\0\1\3"+
    "\20\0\10\3\1\0\6\3\1\0\2\3\1\0\2\3"+
    "\1\0\2\3\1\61\7\3\1\62\2\3\1\45\6\3"+
    "\3\0\1\3\1\0\1\3\4\0\1\46\13\0\2\3"+
    "\1\37\5\3\1\0\6\3\1\0\2\3\1\0\2\3"+
    "\1\0\2\3\1\63\12\3\1\45\6\3\3\0\1\3"+
    "\1\0\1\3\4\0\1\46\13\0\10\3\1\0\6\3"+
    "\1\0\2\3\1\0\2\3\1\64\15\3\1\45\6\3"+
    "\3\0\1\3\1\0\1\3\4\0\1\46\13\0\1\3"+
    "\1\37\6\3\1\0\6\3\1\0\2\3\1\0\2\3"+
    "\1\0\15\3\1\65\6\3\3\0\1\3\1\0\1\3"+
    "\20\0\10\3\1\0\6\3\1\0\2\3\21\0\1\26"+
    "\41\0\1\66\15\0\2\3\1\67\15\3\1\0\6\3"+
    "\3\0\1\3\1\0\1\3\20\0\10\3\1\0\6\3"+
    "\1\0\2\3\1\0\2\3\1\0\15\3\1\45\2\3"+
    "\1\42\3\3\3\0\1\3\1\0\1\3\4\0\1\46"+
    "\13\0\10\3\1\0\6\3\1\0\2\3\1\0\2\3"+
    "\1\0\4\3\1\70\1\71\7\3\1\0\6\3\3\0"+
    "\1\3\1\0\1\3\20\0\10\3\1\0\6\3\1\0"+
    "\2\3\1\0\2\3\1\0\5\3\1\71\7\3\1\0"+
    "\6\3\3\0\1\3\1\0\1\3\20\0\10\3\1\0"+
    "\6\3\1\0\2\3\1\0\2\3\1\0\3\3\1\2"+
    "\11\3\1\0\6\3\3\0\1\3\1\0\1\3\20\0"+
    "\10\3\1\0\6\3\1\0\2\3\31\0\1\72\147\0"+
    "\2\3\1\0\10\3\1\73\4\3\1\0\6\3\3\0"+
    "\1\3\1\0\1\3\20\0\10\3\1\0\6\3\1\0"+
    "\2\3\37\0\1\26\100\0\1\26\102\0\1\74\35\0"+
    "\1\75\3\0\1\75\7\0\1\75\2\0\1\75\1\0"+
    "\2\75\1\0\1\75\1\0\1\75\3\0\1\75\22\0"+
    "\1\75\1\0\1\75\1\0\1\75\1\0\2\75\2\0"+
    "\1\75\62\0\1\26\30\0\1\76\5\0\1\77\1\100"+
    "\1\101\1\0\1\102\5\0\1\103\22\0\1\104\7\0"+
    "\1\105\1\0\1\106\5\0\1\107\2\0\1\110\6\0"+
    "\2\3\1\0\15\3\1\45\6\3\3\0\1\3\1\0"+
    "\1\3\4\0\1\46\13\0\10\3\1\0\6\3\1\0"+
    "\2\3\1\0\1\3\1\111\1\0\10\3\1\37\4\3"+
    "\1\45\6\3\3\0\1\3\1\0\1\3\4\0\1\46"+
    "\13\0\10\3\1\0\6\3\1\0\2\3\1\0\2\3"+
    "\1\0\15\3\1\0\6\3\3\0\1\3\1\0\1\3"+
    "\1\53\17\0\10\3\1\0\6\3\1\0\2\3\1\0"+
    "\2\3\1\65\15\3\1\0\6\3\3\0\1\3\1\0"+
    "\1\3\20\0\10\3\1\0\6\3\1\0\2\3\3\0"+
    "\1\26\77\0\1\65\137\0\1\112\40\0\1\44\74\0"+
    "\2\3\1\0\1\42\14\3\1\0\6\3\3\0\1\3"+
    "\1\0\1\3\20\0\10\3\1\0\6\3\1\0\2\3"+
    "\1\0\2\3\1\0\12\3\1\37\2\3\1\0\6\3"+
    "\3\0\1\3\1\0\1\3\20\0\10\3\1\0\6\3"+
    "\1\0\2\3\10\0\1\113\5\0\2\45\141\0\1\114"+
    "\61\0\1\115\35\0\2\3\1\0\4\3\1\116\10\3"+
    "\1\0\6\3\3\0\1\3\1\0\1\3\3\0\1\45"+
    "\14\0\10\3\1\0\6\3\1\0\2\3\7\0\1\44"+
    "\71\0\2\3\1\0\10\3\1\42\4\3\1\0\6\3"+
    "\3\0\1\3\1\0\1\3\20\0\10\3\1\0\6\3"+
    "\1\0\2\3\1\0\2\3\1\0\13\3\1\37\1\3"+
    "\1\0\6\3\3\0\1\3\1\0\1\3\20\0\10\3"+
    "\1\0\6\3\1\0\2\3\1\0\2\3\1\65\12\3"+
    "\1\42\2\3\1\0\6\3\3\0\1\3\1\0\1\3"+
    "\20\0\10\3\1\0\6\3\1\0\2\3\1\0\2\3"+
    "\1\65\7\3\1\42\5\3\1\0\6\3\3\0\1\3"+
    "\1\0\1\3\20\0\10\3\1\0\6\3\1\0\2\3"+
    "\1\0\2\3\1\0\6\3\1\42\6\3\1\0\6\3"+
    "\3\0\1\3\1\0\1\3\20\0\10\3\1\0\6\3"+
    "\1\0\2\3\16\0\1\117\71\0\1\120\25\0\1\45"+
    "\42\0\1\117\77\0\2\3\1\0\12\3\1\42\2\3"+
    "\1\0\6\3\3\0\1\3\1\0\1\3\20\0\10\3"+
    "\1\0\6\3\1\0\2\3\1\0\2\3\1\0\13\3"+
    "\1\57\1\3\1\0\6\3\3\0\1\3\1\0\1\3"+
    "\20\0\10\3\1\0\6\3\1\0\2\3\32\0\1\65"+
    "\46\0\2\3\1\121\15\3\1\0\6\3\3\0\1\3"+
    "\1\0\1\3\20\0\10\3\1\0\6\3\1\0\2\3"+
    "\44\0\1\26\21\0\1\122\12\0\1\123\3\0\1\123"+
    "\7\0\1\123\2\0\1\123\1\0\2\123\1\0\1\123"+
    "\1\0\1\123\3\0\1\123\22\0\1\123\1\0\1\123"+
    "\1\0\1\123\1\0\2\123\2\0\1\123\17\0\1\124"+
    "\73\0\1\125\50\0\1\126\1\0\1\125\30\0\1\127"+
    "\76\0\1\130\1\0\1\131\143\0\1\126\11\0\1\132"+
    "\17\0\1\133\1\0\1\134\100\0\1\77\1\100\1\135"+
    "\1\0\1\136\5\0\1\103\32\0\1\105\1\0\1\106"+
    "\5\0\1\107\2\0\1\137\7\0\1\140\106\0\1\141"+
    "\70\0\1\142\52\0\1\126\24\0\1\143\76\0\2\3"+
    "\1\0\15\3\1\0\6\3\3\0\1\3\1\0\1\3"+
    "\20\0\3\3\1\37\4\3\1\0\6\3\1\0\2\3"+
    "\66\0\1\45\35\0\1\45\67\0\1\144\151\0\1\52"+
    "\12\0\2\3\1\0\15\3\1\0\6\3\3\0\1\3"+
    "\1\0\1\3\3\0\1\45\14\0\10\3\1\0\6\3"+
    "\1\0\2\3\14\0\1\44\121\0\1\45\46\0\1\65"+
    "\155\0\1\66\15\0\1\145\3\0\1\145\7\0\1\145"+
    "\2\0\1\145\1\0\2\145\1\0\1\145\1\0\1\145"+
    "\3\0\1\145\22\0\1\145\1\0\1\145\1\0\1\145"+
    "\1\0\2\145\2\0\1\145\76\0\1\146\65\0\1\126"+
    "\111\0\1\147\20\0\1\150\125\0\1\151\51\0\1\152"+
    "\160\0\1\153\32\0\1\154\62\0\1\130\1\0\1\125"+
    "\143\0\1\126\11\0\1\155\12\0\1\156\156\0\1\157"+
    "\114\0\1\125\10\0\1\160\76\0\1\161\112\0\1\45"+
    "\20\0\1\46\105\0\1\162\65\0\1\163\10\0\1\125"+
    "\5\0\1\126\46\0\1\164\134\0\1\125\24\0\1\165"+
    "\154\0\1\125\40\0\1\125\65\0\1\166\74\0\1\167"+
    "\1\152\75\0\1\170\165\0\1\125\22\0\1\125\67\0"+
    "\1\171\151\0\1\172\27\0\1\173\75\0\1\174\77\0"+
    "\1\125\100\0\1\175\76\0\1\176\101\0\1\177\75\0"+
    "\1\200\72\0\1\152\160\0\1\201\113\0\1\202\11\0"+
    "\1\203\72\0\1\204\111\0\1\205\142\0\1\206\25\0"+
    "\1\207\74\0\1\152\156\0\1\210\27\0\1\211\131\0"+
    "\1\212\40\0\1\213\127\0\1\214\106\0\1\215\53\0"+
    "\1\216\27\0\1\216\123\0\1\217\14\0\1\220\106\0"+
    "\1\221\27\0\1\221\37\0\1\222\45\0\1\223\44\0"+
    "\1\224\63\0\1\225\73\0\1\226\2\0\1\227\2\0"+
    "\1\230\1\231\2\0\1\232\1\0\1\233\3\0\1\234"+
    "\32\0\1\235\3\0\1\236\6\0\1\237\1\240\30\0"+
    "\1\241\55\0\1\241\123\0\1\242\134\0\1\243\23\0"+
    "\1\244\2\0\1\245\150\0\1\246\24\0\1\247\71\0"+
    "\1\250\164\0\1\251\22\0\1\252\75\0\1\253\100\0"+
    "\1\254\70\0\1\255\103\0\1\256\100\0\1\257\111\0"+
    "\1\125\27\0\1\125\34\0\1\152\75\0\1\260\101\0"+
    "\1\261\73\0\1\262\101\0\1\263\117\0\1\264\136\0"+
    "\1\265\24\0\1\266\150\0\1\267\75\0\1\270\77\0"+
    "\1\271\44\0\1\272\62\0\1\273\102\0\1\274\132\0"+
    "\1\275\51\0\1\276\76\0\1\277\73\0\1\300\76\0"+
    "\1\301\112\0\1\302\136\0\1\303\52\0\1\304\53\0"+
    "\1\272\77\0\1\305\74\0\1\305\153\0\1\306\32\0"+
    "\1\307\102\0\1\310\27\0\1\310\36\0\1\311\105\0"+
    "\1\312\72\0\1\313\151\0\1\305\24\0\1\314\100\0"+
    "\1\274\156\0\1\315\30\0\1\316\27\0\1\316\41\0"+
    "\1\307\100\0\1\305\72\0\1\317\2\0\1\320\57\0"+
    "\1\321\70\0\1\322\24\0\1\323\105\0\1\324\74\0"+
    "\1\325\72\0\1\303\140\0\1\125\113\0\1\241\24\0"+
    "\1\241\75\0\1\241\112\0\1\316\14\0\1\326\12\0"+
    "\1\316\34\0\1\327\105\0\1\322\107\0\1\330\77\0"+
    "\1\331\147\0\1\305\100\0\1\332\11\0\1\333\101\0"+
    "\1\334\157\0\1\335\71\0\1\336\40\0\1\305\145\0"+
    "\1\337\7\0\1\305\75\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13952];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\24\1\1\11\1\1\1\11\2\1\3\0\5\1"+
    "\2\0\1\11\2\0\3\1\2\0\1\1\1\0\5\1"+
    "\1\0\1\11\2\0\2\1\1\0\1\1\15\0\1\1"+
    "\4\0\1\1\7\0\1\11\33\0\1\11\155\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[223];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

    public final int yychar() {
        return yychar;
    }

    public final String getText() {
        return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public IrishTokeniserImpl(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public IrishTokeniserImpl(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 674) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int getNextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 5: 
          { return 2;
          }
        case 8: break;
        case 4: 
          { return 3;
          }
        case 9: break;
        case 3: 
          { return 4;
          }
        case 10: break;
        case 2: 
          { return 5;
          }
        case 11: break;
        case 1: 
          { return 0;
          }
        case 12: break;
        case 7: 
          { return 1;
          }
        case 13: break;
        case 6: 
          { return 7;
          }
        case 14: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                return -1;
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
