/* The following code was generated by JFlex 1.4.3 on 06/10/16 15:13 */

/*
 * Copyright 2016 Trinity College, Dublin
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
package ie.tcd.slscs.tokeniser.ga;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 06/10/16 15:13 from the specification file
 * <tt>c:/msys32/home/Abair/IrishTokeniser/src/main/jflex/irish.jflex</tt>
 */
public final class IrishTokeniserImpl {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\57\1\57\25\0\1\40\1\61\1\60\1\63\1\0\1\136"+
    "\1\34\1\21\1\61\1\62\1\52\1\51\1\42\1\43\1\3\1\53"+
    "\12\47\1\54\1\36\1\66\1\50\1\67\1\31\1\126\1\110\1\105"+
    "\1\1\1\5\1\114\1\131\1\132\1\107\1\116\1\71\1\134\1\113"+
    "\1\15\1\112\1\20\1\33\1\71\1\22\1\23\1\27\1\25\1\127"+
    "\1\135\1\127\1\133\1\71\1\30\1\0\1\32\1\130\1\123\1\41"+
    "\1\10\1\104\1\13\1\106\1\7\1\120\1\4\1\14\1\11\1\70"+
    "\1\125\1\12\1\17\1\111\1\2\1\37\1\35\1\6\1\16\1\24"+
    "\1\26\1\124\1\121\1\117\1\122\1\70\1\61\1\0\1\61\1\61"+
    "\42\0\1\61\1\0\1\65\2\0\1\46\2\0\1\61\1\0\1\61"+
    "\1\61\1\0\1\61\1\61\1\61\1\61\1\61\1\61\1\0\1\61"+
    "\1\0\1\56\1\0\1\61\1\61\1\61\1\61\1\61\1\61\1\61"+
    "\1\0\1\72\1\64\1\55\5\0\1\73\3\0\1\74\5\0\1\75"+
    "\3\0\1\61\2\0\1\76\6\0\1\77\1\44\6\0\1\100\3\0"+
    "\1\101\5\0\1\102\4\0\1\61\1\0\1\103\66\0\1\61\41\0"+
    "\1\46\76\0\1\61\u0147\0\1\61\1\0\1\46\264\0\1\61\1\61"+
    "\1\61\1\61\1\61\1\61\1\61\1\61\1\61\1\61\1\61\1\61"+
    "\1\61\1\61\1\61\1\61\1\61\1\0\1\61\1\61\1\61\1\61"+
    "\1\61\1\61\1\61\7\0\1\61\1\61\1\61\1\61\1\61\1\61"+
    "\1\61\1\61\1\61\1\61\1\61\1\61\1\61\1\61\1\61\1\61"+
    "\1\61\1\61\1\61\1\61\1\61\1\61\1\61\1\61\1\61\7\0"+
    "\1\61\u0116\0\1\61\u1b30\0\1\115\6\0\1\61\1\0\1\61\3\0"+
    "\1\61\11\0\1\61\23\0\1\61\147\0\1\45\150\0\1\61\20\0"+
    "\1\61\54\0\1\61\1\61\74\0\1\61\1\61\1\61\1\61\1\61"+
    "\1\61\1\61\1\61\1\61\17\0\1\61\1\61\47\0\1\61\1\0"+
    "\1\61\53\0\1\61\1\0\1\61\3\0\1\61\10\0\1\61\1\0"+
    "\1\61\3\0\1\61\4\0\1\61\2\0\1\61\1\61\1\0\1\61"+
    "\6\0\1\61\1\0\1\61\1\61\11\0\1\61\23\0\1\61\27\0"+
    "\1\61\1\61\2\0\1\61\1\61\u01fa\0\1\61\1\61\1\61\1\61"+
    "\1\61\1\61\1\61\1\61\1\61\1\61\1\61\1\61\1\61\1\61"+
    "\1\61\1\61\1\61\1\61\1\61\1\61\u0142\0\1\61\5\0\1\61"+
    "\3\0\1\61\223\0\1\61\1\61\1\61\4\0\1\61\1\61\3\0"+
    "\1\61\2\0\1\61\1\0\1\61\1\61\255\0\1\61\3\0\1\61"+
    "\205\0\1\61\2\0\1\61\u0192\0\1\61\1\61\u01cf\0\1\61\1\61"+
    "\1\61\u0658\0\1\61\uce9c\0\1\46\2\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\15\1\1\2\6\1\2\2\1\1"+
    "\1\2\1\3\3\2\5\0\1\2\1\0\1\2\7\1"+
    "\1\0\6\1\1\0\3\1\1\4\2\1\1\0\1\5"+
    "\2\1\3\0\5\1\1\6\1\0\1\1\1\4\2\1"+
    "\1\6\2\0\1\1\1\4\1\1\1\0\10\1\1\6"+
    "\1\0\2\1\1\4\1\7\1\0\1\4\2\1\1\10"+
    "\2\1\1\0\1\1\26\0\7\1\4\0\1\7\2\0"+
    "\1\1\1\0\1\1\5\0\1\6\14\0\1\1\11\0"+
    "\1\1\1\0\3\1\1\0\1\1\2\0\3\1\1\10"+
    "\11\0\1\11\2\0\1\12\30\0\3\1\1\0\2\1"+
    "\1\13\1\0\1\14\2\0\1\4\2\0\1\1\3\0"+
    "\1\11\42\0\1\1\4\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\7\1\15\1\0"+
    "\1\16\21\0\1\17\6\0\2\1\1\0\1\1\34\0"+
    "\1\20\17\0\1\1\4\0\1\1\2\0\1\1\6\0"+
    "\1\21\54\0\1\22\7\0\1\1\3\0\1\1\4\0"+
    "\1\15\1\16\21\0\1\23\3\0\1\23\6\0\1\20"+
    "\31\0\1\16\13\0\1\23\31\0\1\16\10\0\1\23"+
    "\1\0\1\22\12\0\1\20\13\0\1\20\5\0\1\20"+
    "\17\0\3\20\130\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[687];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\137\0\276\0\u011d\0\u017c\0\u01db\0\u023a\0\u0299"+
    "\0\u02f8\0\u0357\0\u03b6\0\u0415\0\u0474\0\u04d3\0\u0532\0\u0591"+
    "\0\u05f0\0\u064f\0\u06ae\0\u070d\0\u076c\0\u07cb\0\u082a\0\u0889"+
    "\0\u08e8\0\u0947\0\u09a6\0\u0a05\0\u0a64\0\u0ac3\0\u0b22\0\u0b81"+
    "\0\u0be0\0\u0c3f\0\u0b81\0\u0c9e\0\u0cfd\0\u0d5c\0\u0dbb\0\u0e1a"+
    "\0\u0e79\0\u0ed8\0\u0f37\0\u0f96\0\u0ff5\0\u1054\0\u10b3\0\u1112"+
    "\0\u1171\0\u11d0\0\u122f\0\u128e\0\u12ed\0\u134c\0\u13ab\0\u140a"+
    "\0\u1469\0\u14c8\0\u1527\0\u1586\0\u15e5\0\u1644\0\u0947\0\u16a3"+
    "\0\u1702\0\u1761\0\u17c0\0\u181f\0\u187e\0\u18dd\0\u193c\0\u199b"+
    "\0\u19fa\0\u1a59\0\u1ab8\0\u1b17\0\u1b76\0\u1bd5\0\u1c34\0\u1c93"+
    "\0\u1cf2\0\u1d51\0\u1db0\0\u1e0f\0\u1e6e\0\u1ecd\0\u1f2c\0\u1f8b"+
    "\0\u1fea\0\u2049\0\u20a8\0\u2107\0\u2166\0\u21c5\0\u0947\0\u2224"+
    "\0\u2283\0\u22e2\0\u2341\0\u0947\0\u23a0\0\u23ff\0\u245e\0\u24bd"+
    "\0\u251c\0\u257b\0\u25da\0\u2639\0\u2698\0\u26f7\0\u2756\0\u27b5"+
    "\0\u2814\0\u2873\0\u28d2\0\u2931\0\u2990\0\u29ef\0\u2a4e\0\u2aad"+
    "\0\u2b0c\0\u2b6b\0\u2bca\0\u2c29\0\u2c88\0\u2ce7\0\u2d46\0\u2da5"+
    "\0\u2e04\0\u1527\0\u2e63\0\u2ec2\0\u2f21\0\u2f80\0\u2fdf\0\u303e"+
    "\0\u309d\0\u30fc\0\u315b\0\u31ba\0\u3219\0\u3278\0\u31ba\0\u32d7"+
    "\0\u3336\0\u3395\0\u33f4\0\u3453\0\u34b2\0\u3511\0\u3570\0\u35cf"+
    "\0\u362e\0\u3219\0\u368d\0\u36ec\0\u374b\0\u37aa\0\u3809\0\u3868"+
    "\0\u38c7\0\u3926\0\u3985\0\u39e4\0\u3a43\0\u3aa2\0\u3b01\0\u3b60"+
    "\0\u3bbf\0\u3c1e\0\u3c7d\0\u3cdc\0\u3d3b\0\u3d9a\0\u3df9\0\u3e58"+
    "\0\u3eb7\0\u3f16\0\u3f75\0\u3fd4\0\u4033\0\u4092\0\u40f1\0\u4150"+
    "\0\u41af\0\u420e\0\u426d\0\u42cc\0\u432b\0\u432b\0\u438a\0\u43e9"+
    "\0\u4448\0\u44a7\0\u4506\0\u4565\0\u45c4\0\u4623\0\u0d5c\0\u4682"+
    "\0\u46e1\0\u0947\0\u4740\0\u479f\0\u47fe\0\u485d\0\u48bc\0\u491b"+
    "\0\u497a\0\u49d9\0\u4a38\0\u4a97\0\u4af6\0\u4b55\0\u4bb4\0\u4c13"+
    "\0\u4c72\0\u4cd1\0\u4d30\0\u4d8f\0\u4dee\0\u4e4d\0\u4eac\0\u4f0b"+
    "\0\u4f6a\0\u4fc9\0\u5028\0\u5087\0\u50e6\0\u5145\0\u51a4\0\u5203"+
    "\0\u0947\0\u5262\0\u0947\0\u52c1\0\u5320\0\u0947\0\u537f\0\u53de"+
    "\0\u543d\0\u549c\0\u54fb\0\u555a\0\u0947\0\u55b9\0\u5618\0\u5677"+
    "\0\u56d6\0\u5735\0\u5794\0\u57f3\0\u5852\0\u58b1\0\u5910\0\u596f"+
    "\0\u59ce\0\u5a2d\0\u5a8c\0\u5aeb\0\u5b4a\0\u5ba9\0\u5c08\0\u5c67"+
    "\0\u5cc6\0\u5d25\0\u5d84\0\u5de3\0\u5e42\0\u5ea1\0\u5f00\0\u5f5f"+
    "\0\u5fbe\0\u601d\0\u607c\0\u60db\0\u613a\0\u6199\0\u61f8\0\u6257"+
    "\0\u62b6\0\u6315\0\u6374\0\u63d3\0\u6432\0\u6491\0\u64f0\0\u654f"+
    "\0\u65ae\0\u660d\0\u666c\0\u66cb\0\u672a\0\u5262\0\u0947\0\u6789"+
    "\0\u67e8\0\u6847\0\u68a6\0\u6905\0\u6964\0\u69c3\0\u6a22\0\u6a81"+
    "\0\u6ae0\0\u6b3f\0\u6b9e\0\u6bfd\0\u6c5c\0\u6cbb\0\u6d1a\0\u6d79"+
    "\0\u6dd8\0\u6e37\0\u0947\0\u6e96\0\u6ef5\0\u6f54\0\u6fb3\0\u7012"+
    "\0\u7071\0\u70d0\0\u712f\0\u718e\0\u71ed\0\u724c\0\u72ab\0\u730a"+
    "\0\u7369\0\u73c8\0\u7427\0\u7486\0\u74e5\0\u7544\0\u75a3\0\u7602"+
    "\0\u7661\0\u76c0\0\u771f\0\u777e\0\u77dd\0\u783c\0\u789b\0\u78fa"+
    "\0\u7959\0\u79b8\0\u7a17\0\u7a76\0\u7ad5\0\u7b34\0\u7b93\0\u7bf2"+
    "\0\u7c51\0\u0947\0\u7cb0\0\u7d0f\0\u7d6e\0\u7dcd\0\u7e2c\0\u7e8b"+
    "\0\u7eea\0\u7f49\0\u7fa8\0\u8007\0\u8066\0\u80c5\0\u8124\0\u8183"+
    "\0\u81e2\0\u8241\0\u82a0\0\u82ff\0\u835e\0\u83bd\0\u841c\0\u847b"+
    "\0\u84da\0\u8539\0\u8598\0\u85f7\0\u8656\0\u86b5\0\u8714\0\u8773"+
    "\0\u0947\0\u87d2\0\u8831\0\u8890\0\u88ef\0\u894e\0\u89ad\0\u8a0c"+
    "\0\u8a6b\0\u8aca\0\u8b29\0\u8b88\0\u8be7\0\u8c46\0\u8ca5\0\u8d04"+
    "\0\u8d63\0\u8dc2\0\u8e21\0\u8e80\0\u8edf\0\u8f3e\0\u8f9d\0\u8ffc"+
    "\0\u905b\0\u90ba\0\u9119\0\u9178\0\u91d7\0\u9236\0\u9295\0\u92f4"+
    "\0\u9353\0\u93b2\0\u9411\0\u9470\0\u94cf\0\u952e\0\u958d\0\u95ec"+
    "\0\u964b\0\u96aa\0\u9709\0\u9768\0\u97c7\0\u0947\0\u9826\0\u9885"+
    "\0\u98e4\0\u9943\0\u99a2\0\u9a01\0\u9a60\0\u9abf\0\u9b1e\0\u9b7d"+
    "\0\u9bdc\0\u9c3b\0\u9c9a\0\u9cf9\0\u9d58\0\u9db7\0\u1112\0\u9e16"+
    "\0\u9e75\0\u9ed4\0\u9f33\0\u9f92\0\u9ff1\0\ua050\0\ua0af\0\ua10e"+
    "\0\ua16d\0\ua1cc\0\ua22b\0\ua28a\0\ua2e9\0\ua348\0\ua3a7\0\ua406"+
    "\0\ua465\0\ua4c4\0\ua523\0\ua582\0\ua5e1\0\u8edf\0\ua640\0\ua69f"+
    "\0\ua6fe\0\ua75d\0\ua7bc\0\ua81b\0\u905b\0\ua87a\0\ua8d9\0\ua938"+
    "\0\ua997\0\ua9f6\0\uaa55\0\uaab4\0\uab13\0\uab72\0\uabd1\0\uac30"+
    "\0\uac8f\0\uacee\0\uad4d\0\uadac\0\uae0b\0\uae6a\0\uaec9\0\uaf28"+
    "\0\uaf87\0\uafe6\0\ub045\0\ub0a4\0\ub103\0\ub162\0\u0947\0\ub1c1"+
    "\0\ub220\0\ub27f\0\ub2de\0\ub33d\0\ub39c\0\ub3fb\0\ub45a\0\ub4b9"+
    "\0\ub518\0\ub577\0\ub5d6\0\ub635\0\ub694\0\ub6f3\0\ub752\0\ub7b1"+
    "\0\ub810\0\ub86f\0\ub8ce\0\ub92d\0\ub98c\0\ub9eb\0\uba4a\0\ubaa9"+
    "\0\ubb08\0\ubb67\0\ubbc6\0\ubc25\0\ubc84\0\ubce3\0\ubd42\0\ubda1"+
    "\0\ube00\0\ube5f\0\ubebe\0\ubf1d\0\ubf7c\0\ubfdb\0\uc03a\0\uc099"+
    "\0\uc0f8\0\uc157\0\uc1b6\0\uc215\0\uc274\0\uc2d3\0\uc332\0\uc391"+
    "\0\uc3f0\0\uc44f\0\uc4ae\0\uc50d\0\uc56c\0\uc5cb\0\uc62a\0\uc689"+
    "\0\uc6e8\0\uc747\0\uc7a6\0\uc805\0\uc864\0\uc8c3\0\uc922\0\uc981"+
    "\0\uc9e0\0\uca3f\0\uca9e\0\ucafd\0\ucb5c\0\ucbbb\0\ucc1a\0\ucc79"+
    "\0\uccd8\0\ucd37\0\ucd96\0\ucdf5\0\uce54\0\uceb3\0\ucf12\0\ucf71"+
    "\0\ucfd0\0\ud02f\0\ud08e\0\ud0ed\0\ud14c\0\ud1ab\0\ud20a\0\ud269"+
    "\0\ud2c8\0\ud327\0\ud386\0\ud3e5\0\ud444\0\ud4a3\0\u99a2\0\ud502"+
    "\0\ud561\0\ud5c0\0\ud61f\0\ud67e\0\ud6dd\0\ud73c\0\ud79b\0\ud7fa"+
    "\0\ud859\0\ud8b8\0\ud917\0\ud976\0\ud9d5\0\uda34\0\uda93\0\udaf2"+
    "\0\udb51\0\udbb0\0\udc0f\0\udc6e\0\udccd\0\udd2c\0\udd8b\0\uddea"+
    "\0\ude49\0\udea8\0\udf07\0\udf66\0\udfc5\0\ue024\0\ue083\0\ue0e2"+
    "\0\ue141\0\ue1a0\0\ue1ff\0\ue25e\0\ue2bd\0\ue31c\0\ue37b\0\ue3da"+
    "\0\ue439\0\ue498\0\ue4f7\0\ue556\0\ue5b5\0\ue614\0\ue673\0\ue6d2"+
    "\0\ue731\0\ue790\0\ue7ef\0\ue84e\0\ue8ad\0\ue90c\0\ue96b\0\ue9ca"+
    "\0\uea29\0\uea88\0\ueae7\0\ueb46\0\ueba5\0\uec04\0\uec63\0\uecc2"+
    "\0\ued21\0\ued80\0\ueddf\0\uee3e\0\uee9d\0\ueefc\0\uef5b\0\uefba"+
    "\0\uf019\0\uf078\0\uf0d7\0\uf136\0\uf195\0\uf1f4\0\uf253\0\uf2b2"+
    "\0\uf311\0\uf370\0\uf3cf\0\uf42e\0\uf48d\0\uf4ec\0\uf54b";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[687];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\2\32\1\33\1\34\1\7\1\32\1\7\1\35"+
    "\1\36\1\37\1\40\1\41\1\32\1\0\1\42\2\43"+
    "\1\44\2\40\1\45\1\32\1\0\3\32\1\46\1\47"+
    "\1\0\1\50\1\32\3\7\2\51\1\52\2\7\2\51"+
    "\1\52\1\7\2\53\1\54\1\7\1\11\1\55\1\56"+
    "\1\57\1\7\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\0\1\62\1\7\1\0\1\66\1\67\1\63\1\70"+
    "\1\65\2\7\2\0\1\71\1\72\1\73\10\74\1\75"+
    "\4\74\1\0\6\74\3\0\1\74\1\0\1\74\1\0"+
    "\1\74\7\0\1\76\12\0\1\77\5\0\3\74\1\100"+
    "\4\74\1\100\6\74\1\75\3\74\1\71\1\74\1\0"+
    "\1\71\4\74\1\0\2\74\1\0\1\71\1\0\5\74"+
    "\2\0\2\74\1\73\12\74\1\101\2\74\1\0\1\74"+
    "\1\101\4\74\3\0\1\74\1\0\1\74\1\0\1\74"+
    "\7\0\1\76\12\0\1\77\5\0\25\74\1\0\5\74"+
    "\1\0\2\74\1\0\1\74\1\0\5\74\4\0\1\102"+
    "\5\0\1\103\30\0\2\43\3\0\1\104\5\43\1\45"+
    "\62\0\1\105\1\106\1\73\14\74\1\106\1\0\6\74"+
    "\3\0\1\74\1\0\1\74\1\0\1\74\7\0\1\76"+
    "\12\0\1\77\5\0\25\74\1\0\5\74\1\0\2\74"+
    "\1\0\1\74\1\0\5\74\2\0\1\74\1\107\1\73"+
    "\2\74\1\72\1\110\4\74\1\111\3\74\1\107\1\112"+
    "\6\74\3\0\1\74\1\113\1\74\1\0\1\74\7\0"+
    "\1\76\12\0\1\77\5\0\2\74\1\114\4\74\1\114"+
    "\7\74\1\111\4\74\1\110\1\112\5\74\1\0\2\74"+
    "\1\0\1\74\1\0\5\74\2\0\2\74\1\73\15\74"+
    "\1\0\6\74\3\0\1\74\1\0\1\74\1\0\1\74"+
    "\7\0\1\76\12\0\1\77\5\0\25\74\1\0\5\74"+
    "\1\0\2\74\1\0\1\74\1\0\5\74\2\0\2\74"+
    "\1\115\4\74\1\116\10\74\1\0\6\74\3\0\1\74"+
    "\1\0\1\74\1\0\1\74\7\0\1\76\12\0\1\77"+
    "\5\0\25\74\1\0\5\74\1\0\2\74\1\0\1\74"+
    "\1\0\5\74\2\0\2\74\1\73\2\74\1\117\12\74"+
    "\1\120\1\117\5\74\3\0\1\74\1\121\1\74\1\0"+
    "\1\74\1\122\6\0\1\76\12\0\1\77\5\0\21\74"+
    "\2\123\2\74\1\120\5\74\1\0\2\74\1\0\1\74"+
    "\1\0\5\74\2\0\2\74\1\124\5\74\3\125\5\74"+
    "\1\0\6\74\3\0\1\74\1\0\1\74\1\0\1\74"+
    "\1\126\6\0\1\76\12\0\1\77\5\0\21\74\2\127"+
    "\2\74\1\0\1\74\1\125\3\74\1\0\1\125\1\74"+
    "\1\0\1\74\1\0\5\74\2\0\2\74\1\73\1\130"+
    "\2\74\1\131\1\74\2\125\1\132\5\74\1\0\6\74"+
    "\3\0\1\74\1\0\1\74\1\0\1\74\7\0\1\76"+
    "\12\0\1\77\5\0\24\74\1\131\1\0\1\74\1\125"+
    "\3\74\1\0\1\125\1\74\1\0\1\74\1\0\5\74"+
    "\2\0\2\74\1\73\5\74\3\125\1\75\4\74\1\0"+
    "\6\74\3\0\1\74\1\0\1\74\1\0\1\74\7\0"+
    "\1\76\12\0\1\77\5\0\3\74\1\100\4\74\1\100"+
    "\6\74\1\75\5\74\1\0\1\74\1\125\3\74\1\0"+
    "\1\125\1\74\1\0\1\74\1\0\5\74\2\0\2\74"+
    "\1\73\15\74\1\0\2\74\1\133\3\74\3\0\1\74"+
    "\1\0\1\74\1\0\1\74\7\0\1\76\12\0\1\77"+
    "\5\0\25\74\1\0\5\74\1\0\2\74\1\0\1\74"+
    "\1\0\5\74\2\0\2\74\1\73\2\74\1\134\1\74"+
    "\1\135\5\74\1\136\2\74\1\137\6\74\3\0\1\74"+
    "\1\140\1\74\1\0\1\74\7\0\1\76\12\0\1\77"+
    "\5\0\14\74\2\111\2\74\1\135\4\74\1\137\5\74"+
    "\1\0\2\74\1\0\1\74\1\0\5\74\2\0\1\74"+
    "\1\141\1\73\2\74\1\142\11\74\1\141\1\137\6\74"+
    "\3\0\1\74\1\140\1\74\1\0\1\74\7\0\1\76"+
    "\12\0\1\77\5\0\25\74\1\137\5\74\1\0\2\74"+
    "\1\0\1\74\1\0\5\74\2\0\2\74\1\143\4\74"+
    "\1\135\10\74\1\137\6\74\3\0\1\74\1\140\1\74"+
    "\1\0\1\74\7\0\1\76\12\0\1\77\5\0\14\74"+
    "\2\111\2\74\1\135\4\74\1\137\5\74\1\0\2\74"+
    "\1\0\1\74\1\0\5\74\2\0\2\74\1\73\12\74"+
    "\1\101\2\74\1\144\1\74\1\101\4\74\3\0\1\74"+
    "\1\0\1\74\1\0\1\74\7\0\1\76\12\0\1\77"+
    "\5\0\25\74\1\0\5\74\1\0\2\74\1\0\1\74"+
    "\1\0\5\74\22\0\1\32\67\0\2\145\25\0\2\74"+
    "\1\146\15\74\1\0\6\74\3\0\1\74\1\0\1\74"+
    "\1\0\1\74\7\0\1\76\12\0\1\77\5\0\25\74"+
    "\1\0\5\74\1\0\2\74\1\0\1\74\1\0\5\74"+
    "\2\0\1\74\1\141\1\73\14\74\1\141\1\137\2\74"+
    "\1\72\3\74\3\0\1\74\1\140\1\74\1\0\1\74"+
    "\7\0\1\76\12\0\1\77\5\0\25\74\1\137\5\74"+
    "\1\0\2\74\1\0\1\74\1\0\5\74\2\0\2\74"+
    "\1\73\4\74\1\147\3\74\1\150\4\74\1\0\6\74"+
    "\3\0\1\74\1\0\1\74\1\0\1\74\3\0\1\151"+
    "\3\0\1\76\12\0\1\77\5\0\17\74\1\150\1\147"+
    "\4\74\1\0\5\74\1\0\2\74\1\0\1\74\1\0"+
    "\5\74\2\0\2\74\1\73\4\74\1\152\1\153\7\74"+
    "\1\0\6\74\3\0\1\74\1\0\1\74\1\0\1\74"+
    "\7\0\1\76\12\0\1\77\5\0\25\74\1\0\5\74"+
    "\1\0\2\74\1\0\1\74\1\0\5\74\2\0\2\74"+
    "\1\73\5\74\1\153\7\74\1\0\6\74\3\0\1\74"+
    "\1\0\1\74\1\0\1\74\7\0\1\76\12\0\1\77"+
    "\5\0\25\74\1\0\5\74\1\0\2\74\1\0\1\74"+
    "\1\0\5\74\2\0\2\74\1\73\3\74\1\105\1\147"+
    "\3\74\1\150\4\74\1\0\6\74\3\0\1\74\1\0"+
    "\1\74\1\0\1\74\7\0\1\76\12\0\1\77\5\0"+
    "\17\74\1\150\1\147\4\74\1\0\5\74\1\0\2\74"+
    "\1\0\1\74\1\0\5\74\32\0\1\154\245\0\2\74"+
    "\1\73\10\74\1\155\4\74\1\0\6\74\3\0\1\74"+
    "\1\0\1\74\1\0\1\74\7\0\1\76\12\0\1\77"+
    "\5\0\25\74\1\0\5\74\1\0\2\74\1\0\1\74"+
    "\1\0\5\74\5\0\1\156\3\0\1\157\1\0\1\156"+
    "\22\0\1\160\111\0\1\161\77\0\1\161\67\0\1\32"+
    "\100\0\1\43\36\0\1\40\1\43\3\0\1\104\5\43"+
    "\1\45\64\0\1\43\36\0\2\43\3\0\1\104\5\43"+
    "\1\45\126\0\1\162\127\0\1\163\101\0\1\164\1\0"+
    "\1\43\1\0\1\164\7\0\1\164\2\0\1\164\1\0"+
    "\2\164\1\0\1\164\1\0\1\164\3\0\1\164\6\0"+
    "\2\43\3\0\1\104\5\43\1\45\13\0\6\164\6\0"+
    "\1\164\1\0\2\164\1\0\3\164\1\0\1\164\10\0"+
    "\1\164\1\0\5\164\57\0\1\43\127\0\1\165\154\0"+
    "\1\32\55\0\1\166\5\0\1\167\1\170\1\171\1\0"+
    "\1\172\5\0\1\173\12\0\1\174\13\0\1\175\30\0"+
    "\1\176\1\0\1\177\4\0\1\200\4\0\1\201\17\0"+
    "\2\74\1\202\15\74\1\0\6\74\3\0\1\74\1\0"+
    "\1\74\1\0\1\74\7\0\1\76\12\0\1\77\5\0"+
    "\25\74\1\0\5\74\1\0\2\74\1\0\1\74\1\0"+
    "\5\74\2\0\2\74\1\73\15\74\1\0\6\74\3\0"+
    "\1\74\1\0\1\74\1\0\1\74\1\203\6\0\1\76"+
    "\12\0\1\77\5\0\25\74\1\0\5\74\1\0\2\74"+
    "\1\0\1\74\1\0\5\74\2\0\2\74\1\73\15\74"+
    "\1\137\6\74\3\0\1\74\1\140\1\74\1\0\1\74"+
    "\7\0\1\76\12\0\1\77\5\0\25\74\1\137\5\74"+
    "\1\0\2\74\1\0\1\74\1\0\5\74\2\0\1\74"+
    "\1\107\1\73\3\74\1\110\4\74\1\111\3\74\1\107"+
    "\1\112\6\74\3\0\1\74\1\113\1\74\1\0\1\74"+
    "\7\0\1\76\12\0\1\77\5\0\2\74\1\114\4\74"+
    "\1\114\7\74\1\111\4\74\1\110\1\112\5\74\1\0"+
    "\2\74\1\0\1\74\1\0\5\74\2\0\1\74\1\204"+
    "\1\73\14\74\1\204\1\137\6\74\3\0\1\74\1\140"+
    "\1\74\1\0\1\74\3\0\1\151\3\0\1\76\12\0"+
    "\1\77\5\0\4\74\1\205\4\74\1\205\13\74\1\137"+
    "\5\74\1\0\2\74\1\0\1\74\1\0\5\74\2\0"+
    "\1\74\1\204\1\73\14\74\1\204\1\137\6\74\3\0"+
    "\1\74\1\140\1\74\1\0\1\74\7\0\1\76\12\0"+
    "\1\77\5\0\4\74\1\205\4\74\1\205\13\74\1\137"+
    "\5\74\1\0\2\74\1\0\1\74\1\0\5\74\2\0"+
    "\1\71\1\74\1\73\3\74\1\131\11\74\1\0\6\74"+
    "\3\0\1\74\1\0\1\74\1\0\1\74\7\0\1\76"+
    "\12\0\1\77\5\0\23\74\1\71\1\131\1\0\1\71"+
    "\4\74\1\0\2\74\1\0\1\71\1\0\5\74\112\0"+
    "\2\145\25\0\1\71\1\74\1\73\15\74\1\0\1\206"+
    "\5\74\3\0\1\74\1\0\1\74\1\0\1\74\1\126"+
    "\6\0\1\76\12\0\1\77\5\0\21\74\2\127\1\71"+
    "\1\74\1\0\1\71\4\74\1\0\2\74\1\0\1\71"+
    "\1\0\5\74\2\0\2\74\1\73\5\74\3\125\5\74"+
    "\1\0\6\74\3\0\1\74\1\0\1\74\1\0\1\74"+
    "\7\0\1\76\12\0\1\77\5\0\25\74\1\0\1\74"+
    "\1\125\3\74\1\0\1\125\1\74\1\0\1\74\1\0"+
    "\5\74\2\0\2\74\1\73\4\74\1\207\10\74\1\0"+
    "\6\74\3\0\1\74\1\0\1\74\1\0\1\74\7\0"+
    "\1\76\12\0\1\77\5\0\2\74\1\210\4\74\1\210"+
    "\10\74\1\207\4\74\1\0\5\74\1\0\2\74\1\0"+
    "\1\74\1\0\5\74\2\0\2\74\1\73\15\74\1\0"+
    "\6\74\3\0\1\74\1\0\1\74\1\0\1\74\7\0"+
    "\1\76\12\0\1\77\5\0\25\74\1\0\3\74\1\211"+
    "\1\74\1\0\2\74\1\0\1\74\1\0\5\74\2\0"+
    "\1\74\1\212\1\73\14\74\1\212\1\0\6\74\3\0"+
    "\1\74\1\0\1\74\1\0\1\74\7\0\1\76\12\0"+
    "\1\77\5\0\25\74\1\0\5\74\1\0\2\74\1\0"+
    "\1\74\1\0\5\74\2\0\1\71\1\74\1\73\15\74"+
    "\1\0\6\74\3\0\1\74\1\0\1\74\1\0\1\74"+
    "\7\0\1\76\12\0\1\77\5\0\23\74\1\71\1\74"+
    "\1\0\1\71\4\74\1\0\2\74\1\0\1\71\1\0"+
    "\5\74\2\0\2\213\1\0\24\213\3\0\1\213\1\0"+
    "\1\213\1\0\2\213\2\0\1\213\24\0\25\213\1\0"+
    "\5\213\1\0\2\213\1\0\1\213\1\0\5\213\2\0"+
    "\1\74\1\106\1\73\14\74\1\106\1\0\6\74\3\0"+
    "\1\74\1\0\1\74\1\0\1\74\7\0\1\76\12\0"+
    "\1\77\5\0\25\74\1\0\5\74\1\0\2\74\1\0"+
    "\1\74\1\0\5\74\2\0\1\71\1\74\1\214\15\74"+
    "\1\215\6\74\3\0\1\74\1\216\1\74\1\0\1\74"+
    "\7\0\1\76\12\0\1\77\5\0\23\74\1\71\1\74"+
    "\1\215\1\71\4\74\1\0\2\74\1\0\1\71\1\0"+
    "\5\74\2\0\2\74\1\217\15\74\1\215\6\74\3\0"+
    "\1\74\1\216\1\74\1\0\1\74\7\0\1\76\20\0"+
    "\25\74\1\215\5\74\1\0\2\74\1\0\1\74\1\0"+
    "\5\74\2\0\2\220\1\0\15\220\1\0\6\220\3\0"+
    "\1\220\1\0\1\220\1\0\1\220\7\0\1\221\20\0"+
    "\25\220\1\0\5\220\1\0\2\220\1\0\1\220\1\0"+
    "\5\220\2\0\2\74\1\214\15\74\1\215\6\74\3\0"+
    "\1\74\1\216\1\74\1\0\1\74\7\0\1\76\20\0"+
    "\25\74\1\215\5\74\1\0\2\74\1\0\1\74\1\0"+
    "\5\74\2\0\2\74\1\214\15\74\1\215\3\74\2\222"+
    "\1\74\3\0\1\74\1\216\1\74\1\0\1\74\7\0"+
    "\1\76\20\0\25\74\1\215\5\74\1\0\2\74\1\0"+
    "\1\74\1\0\5\74\37\0\1\223\101\0\2\74\1\214"+
    "\12\74\1\224\2\74\1\215\1\74\1\224\4\74\3\0"+
    "\1\74\1\216\1\74\1\0\1\74\1\225\6\0\1\76"+
    "\20\0\25\74\1\215\5\74\1\0\2\74\1\0\1\74"+
    "\1\0\5\74\2\0\2\74\1\214\15\74\1\215\6\74"+
    "\3\0\1\74\1\216\1\74\1\0\1\74\1\226\6\0"+
    "\1\76\20\0\25\74\1\215\5\74\1\0\2\74\1\0"+
    "\1\74\1\0\5\74\4\0\1\40\36\0\2\43\3\0"+
    "\1\104\5\43\1\45\64\0\1\144\171\0\1\227\101\0"+
    "\1\74\1\72\1\214\15\74\1\215\6\74\3\0\1\74"+
    "\1\216\1\74\1\0\1\74\7\0\1\76\20\0\25\74"+
    "\1\215\5\74\1\0\2\74\1\0\1\74\1\0\5\74"+
    "\2\0\2\74\1\214\15\74\1\215\6\74\3\0\1\74"+
    "\1\216\1\74\1\0\1\74\1\230\6\0\1\76\20\0"+
    "\25\74\1\215\5\74\1\0\2\74\1\0\1\74\1\0"+
    "\5\74\2\0\2\74\1\214\1\74\1\111\13\74\1\215"+
    "\6\74\3\0\1\74\1\216\1\74\1\0\1\74\7\0"+
    "\1\76\20\0\16\74\1\111\6\74\1\215\5\74\1\0"+
    "\2\74\1\0\1\74\1\0\5\74\2\0\2\74\1\214"+
    "\15\74\1\215\6\74\3\0\1\74\1\216\1\74\1\0"+
    "\1\74\1\231\6\0\1\76\20\0\25\74\1\215\5\74"+
    "\1\0\2\74\1\0\1\74\1\0\5\74\2\0\2\74"+
    "\1\214\15\74\1\232\6\74\3\0\1\74\1\233\1\74"+
    "\1\0\1\74\7\0\1\76\20\0\25\74\1\232\5\74"+
    "\1\0\2\74\1\0\1\74\1\0\5\74\11\0\1\234"+
    "\77\0\1\234\11\0\1\235\10\0\1\235\13\0\1\236"+
    "\127\0\2\74\1\214\15\74\1\215\6\74\3\0\1\74"+
    "\1\216\1\74\1\0\1\74\1\237\6\0\1\76\20\0"+
    "\25\74\1\215\5\74\1\0\2\74\1\0\1\74\1\0"+
    "\5\74\2\0\2\220\1\0\1\240\14\220\1\0\6\220"+
    "\3\0\1\220\1\0\1\220\1\0\1\220\7\0\1\221"+
    "\20\0\25\220\1\0\5\220\1\0\2\220\1\0\1\220"+
    "\1\0\5\220\2\0\2\74\1\214\1\72\14\74\1\215"+
    "\6\74\3\0\1\74\1\216\1\74\1\0\1\74\7\0"+
    "\1\76\20\0\25\74\1\215\5\74\1\0\2\74\1\0"+
    "\1\74\1\0\5\74\2\0\2\74\1\214\12\74\1\111"+
    "\2\74\1\215\1\74\1\111\4\74\3\0\1\74\1\216"+
    "\1\74\1\0\1\74\1\241\6\0\1\76\20\0\25\74"+
    "\1\215\5\74\1\0\2\74\1\0\1\74\1\0\5\74"+
    "\11\0\1\242\4\0\3\137\3\0\1\137\64\0\1\242"+
    "\36\0\1\243\133\0\1\244\4\0\1\245\11\0\1\246"+
    "\2\0\1\246\56\0\1\244\4\0\1\245\24\0\2\74"+
    "\1\214\4\74\1\247\10\74\1\215\6\74\3\0\1\74"+
    "\1\216\1\74\1\0\1\74\3\0\1\137\3\0\1\76"+
    "\20\0\20\74\1\247\4\74\1\215\5\74\1\0\2\74"+
    "\1\0\1\74\1\0\5\74\2\0\2\220\1\0\3\220"+
    "\1\240\11\220\1\0\6\220\3\0\1\220\1\0\1\220"+
    "\1\0\1\220\7\0\1\221\20\0\25\220\1\0\5\220"+
    "\1\0\2\220\1\0\1\220\1\0\5\220\2\0\2\74"+
    "\1\214\5\74\3\125\5\74\1\215\6\74\3\0\1\74"+
    "\1\216\1\74\1\0\1\74\7\0\1\76\12\0\1\77"+
    "\5\0\25\74\1\215\1\74\1\125\3\74\1\0\1\125"+
    "\1\74\1\0\1\74\1\0\5\74\5\0\1\250\1\251"+
    "\1\252\3\0\1\253\2\0\1\254\1\255\1\254\2\0"+
    "\1\252\1\255\60\0\2\256\1\251\2\0\2\257\1\253"+
    "\16\0\1\250\5\0\2\74\1\214\15\74\1\215\6\74"+
    "\3\0\1\74\1\216\1\74\1\0\1\74\1\260\6\0"+
    "\1\76\20\0\25\74\1\215\5\74\1\0\2\74\1\0"+
    "\1\74\1\0\5\74\2\0\2\74\1\214\10\74\1\72"+
    "\4\74\1\215\6\74\3\0\1\74\1\216\1\74\1\0"+
    "\1\74\7\0\1\76\20\0\25\74\1\215\5\74\1\0"+
    "\2\74\1\0\1\74\1\0\5\74\2\0\2\74\1\214"+
    "\4\74\1\261\4\74\1\111\1\74\1\111\1\74\1\215"+
    "\6\74\3\0\1\74\1\216\1\74\1\0\1\74\1\262"+
    "\6\0\1\76\20\0\20\74\1\261\4\74\1\215\5\74"+
    "\1\0\2\74\1\0\1\74\1\0\5\74\2\0\2\74"+
    "\1\214\5\74\3\125\1\72\4\74\1\215\6\74\3\0"+
    "\1\74\1\216\1\74\1\0\1\74\7\0\1\76\12\0"+
    "\1\77\5\0\25\74\1\215\1\74\1\125\3\74\1\0"+
    "\1\125\1\74\1\0\1\74\1\0\5\74\2\0\2\74"+
    "\1\214\15\74\1\215\2\74\1\263\3\74\3\0\1\74"+
    "\1\216\1\74\1\0\1\74\7\0\1\76\20\0\25\74"+
    "\1\215\5\74\1\0\2\74\1\0\1\74\1\0\5\74"+
    "\2\0\2\74\1\217\12\74\1\72\2\74\1\215\6\74"+
    "\3\0\1\74\1\216\1\74\1\0\1\74\7\0\1\76"+
    "\20\0\25\74\1\215\5\74\1\0\2\74\1\0\1\74"+
    "\1\0\5\74\2\0\2\74\1\214\2\74\1\264\2\74"+
    "\1\265\7\74\1\215\1\264\5\74\3\0\1\74\1\216"+
    "\1\74\1\0\1\74\7\0\1\76\20\0\25\74\1\215"+
    "\1\265\4\74\1\0\2\74\1\0\1\74\1\0\5\74"+
    "\2\0\2\74\1\217\7\74\1\72\5\74\1\215\6\74"+
    "\3\0\1\74\1\216\1\74\1\0\1\74\7\0\1\76"+
    "\20\0\25\74\1\215\5\74\1\0\2\74\1\0\1\74"+
    "\1\0\5\74\11\0\1\266\127\0\2\74\1\214\2\74"+
    "\1\267\12\74\1\215\1\267\5\74\3\0\1\74\1\216"+
    "\1\74\1\0\1\74\7\0\1\76\20\0\25\74\1\215"+
    "\5\74\1\0\2\74\1\0\1\74\1\0\5\74\2\0"+
    "\2\74\1\214\6\74\1\72\6\74\1\215\6\74\3\0"+
    "\1\74\1\216\1\74\1\0\1\74\7\0\1\76\20\0"+
    "\25\74\1\215\5\74\1\0\2\74\1\0\1\74\1\0"+
    "\5\74\2\0\2\220\1\0\12\220\1\270\2\220\1\0"+
    "\6\220\3\0\1\220\1\0\1\220\1\0\1\220\7\0"+
    "\1\221\20\0\25\220\1\0\5\220\1\0\2\220\1\0"+
    "\1\220\1\0\5\220\11\0\1\271\27\0\1\137\47\0"+
    "\1\271\27\0\1\270\1\220\1\0\15\220\1\0\6\220"+
    "\3\0\1\220\1\0\1\220\1\0\1\220\7\0\1\221"+
    "\20\0\25\220\1\0\5\220\1\0\2\220\1\0\1\220"+
    "\1\0\5\220\2\0\1\74\1\272\1\214\2\74\1\273"+
    "\11\74\1\272\1\215\1\273\5\74\3\0\1\74\1\216"+
    "\1\74\1\0\1\74\7\0\1\76\20\0\25\74\1\215"+
    "\5\74\1\0\2\74\1\0\1\74\1\0\5\74\2\0"+
    "\2\74\1\214\4\74\1\274\10\74\1\215\6\74\3\0"+
    "\1\74\1\216\1\74\1\0\1\74\7\0\1\76\20\0"+
    "\20\74\1\274\4\74\1\215\5\74\1\0\2\74\1\0"+
    "\1\74\1\0\5\74\1\0\3\275\1\276\15\275\1\276"+
    "\6\275\3\276\1\275\1\276\1\275\1\276\1\275\3\276"+
    "\2\275\1\276\5\275\2\276\1\275\6\276\2\275\2\276"+
    "\47\275\1\0\2\74\1\214\12\74\1\72\2\74\1\215"+
    "\6\74\3\0\1\74\1\216\1\74\1\0\1\74\7\0"+
    "\1\76\20\0\25\74\1\215\5\74\1\0\2\74\1\0"+
    "\1\74\1\0\5\74\2\0\2\74\1\214\13\74\1\130"+
    "\1\74\1\215\6\74\3\0\1\74\1\216\1\74\1\0"+
    "\1\74\7\0\1\76\20\0\25\74\1\215\5\74\1\0"+
    "\2\74\1\0\1\74\1\0\5\74\33\0\1\144\105\0"+
    "\2\74\1\277\15\74\1\215\6\74\3\0\1\74\1\216"+
    "\1\74\1\0\1\74\7\0\1\76\20\0\25\74\1\215"+
    "\5\74\1\0\2\74\1\0\1\74\1\0\5\74\25\0"+
    "\1\300\151\0\1\301\125\0\1\302\134\0\1\303\2\0"+
    "\1\303\155\0\1\32\71\0\2\223\1\304\15\223\1\0"+
    "\6\223\3\0\1\223\1\0\1\223\1\0\1\223\2\0"+
    "\2\43\3\0\1\305\5\43\1\45\4\0\1\77\5\0"+
    "\25\223\1\0\5\223\1\0\2\223\1\0\1\223\1\0"+
    "\5\223\2\0\1\306\3\0\1\306\7\0\1\306\2\0"+
    "\1\306\1\0\2\306\1\0\1\306\1\0\1\306\3\0"+
    "\1\306\35\0\6\306\6\0\1\306\1\0\2\306\1\0"+
    "\3\306\1\0\1\306\10\0\1\306\1\0\5\306\37\0"+
    "\1\307\110\0\1\310\132\0\1\311\62\0\1\312\14\0"+
    "\1\313\42\0\1\314\135\0\1\315\1\0\1\316\164\0"+
    "\1\317\27\0\1\312\56\0\1\320\1\0\1\321\127\0"+
    "\1\322\64\0\1\312\14\0\1\200\36\0\1\323\5\0"+
    "\1\324\1\170\1\325\1\0\1\326\5\0\1\173\12\0"+
    "\1\327\44\0\1\176\1\0\1\330\11\0\1\331\20\0"+
    "\1\332\145\0\1\333\126\0\27\334\1\0\1\334\1\0"+
    "\1\334\1\0\1\334\1\0\2\334\6\0\1\335\1\334"+
    "\2\0\1\334\4\0\1\334\7\0\25\334\1\0\10\334"+
    "\1\0\1\334\1\0\5\334\3\0\1\336\141\0\1\337"+
    "\16\0\1\340\2\0\1\340\56\0\1\337\31\0\2\74"+
    "\1\214\15\74\1\215\6\74\3\0\1\74\1\216\1\74"+
    "\1\0\1\74\1\341\6\0\1\76\20\0\25\74\1\215"+
    "\5\74\1\0\2\74\1\0\1\74\1\0\5\74\2\0"+
    "\2\74\1\214\15\74\1\215\6\74\3\0\1\74\1\216"+
    "\1\74\1\0\1\74\1\342\6\0\1\76\20\0\25\74"+
    "\1\215\5\74\1\0\2\74\1\0\1\74\1\0\5\74"+
    "\2\0\2\74\1\214\15\74\1\215\6\74\3\0\1\343"+
    "\1\216\1\74\1\0\1\74\7\0\1\76\20\0\25\74"+
    "\1\215\5\74\1\0\2\74\1\0\1\74\1\0\5\74"+
    "\2\0\1\74\1\344\1\214\5\74\1\345\6\74\1\344"+
    "\1\215\6\74\3\0\1\74\1\216\1\74\1\0\1\74"+
    "\7\0\1\76\20\0\25\74\1\215\1\345\4\74\1\0"+
    "\2\74\1\0\1\74\1\0\5\74\2\0\2\74\1\214"+
    "\15\74\1\215\6\74\3\0\1\74\1\216\1\74\1\0"+
    "\1\74\1\346\6\0\1\76\20\0\25\74\1\215\5\74"+
    "\1\0\2\74\1\0\1\74\1\0\5\74\2\0\2\74"+
    "\1\214\15\74\1\215\6\74\3\0\1\74\1\216\1\74"+
    "\1\0\1\74\7\0\1\76\20\0\25\74\1\215\3\74"+
    "\1\347\1\74\1\0\2\74\1\0\1\74\1\0\5\74"+
    "\2\0\2\74\1\214\15\74\1\215\3\74\2\350\1\74"+
    "\3\0\1\74\1\216\1\74\1\0\1\74\7\0\1\76"+
    "\20\0\25\74\1\215\5\74\1\0\2\74\1\0\1\74"+
    "\1\0\5\74\2\0\2\213\1\0\24\213\3\0\1\213"+
    "\1\0\1\213\1\0\2\213\2\0\1\213\24\0\25\213"+
    "\1\0\5\213\1\0\2\213\1\0\1\213\1\351\5\213"+
    "\2\0\2\352\1\0\15\352\1\0\6\352\3\0\1\352"+
    "\1\0\1\352\1\0\1\352\7\0\1\221\20\0\25\352"+
    "\1\0\5\352\1\0\2\352\1\0\1\352\1\0\5\352"+
    "\17\0\1\353\4\0\1\353\123\0\1\354\127\0\2\355"+
    "\1\356\15\355\1\0\6\355\3\0\1\355\1\0\1\355"+
    "\1\0\1\355\7\0\1\357\20\0\25\355\1\0\5\355"+
    "\1\0\2\355\1\360\1\355\1\0\5\355\37\0\1\352"+
    "\101\0\2\74\1\214\15\74\1\215\6\74\3\0\1\74"+
    "\1\216\1\74\1\0\1\74\7\0\1\76\20\0\21\74"+
    "\2\361\2\74\1\215\5\74\1\0\2\74\1\0\1\74"+
    "\1\0\5\74\2\0\2\223\1\214\15\223\1\0\6\223"+
    "\3\0\1\223\1\0\1\223\1\0\1\223\7\0\1\76"+
    "\20\0\25\223\1\0\5\223\1\0\2\223\1\0\1\223"+
    "\1\0\5\223\2\0\2\74\1\214\15\74\1\215\6\74"+
    "\3\0\1\74\1\216\1\74\1\0\1\74\1\362\6\0"+
    "\1\76\20\0\25\74\1\215\5\74\1\0\2\74\1\0"+
    "\1\74\1\0\5\74\12\0\1\363\104\0\1\363\21\0"+
    "\1\364\11\0\1\364\126\0\1\43\36\0\2\43\3\0"+
    "\1\104\5\43\1\45\60\0\1\365\1\0\1\366\3\0"+
    "\1\367\4\0\1\370\1\366\72\0\1\367\4\0\1\370"+
    "\24\0\1\371\3\0\1\372\1\373\3\0\1\374\1\371"+
    "\6\0\1\373\1\0\1\375\2\0\1\375\54\0\2\376"+
    "\1\372\4\0\1\374\33\0\1\377\137\0\1\u0100\104\0"+
    "\1\u0100\22\0\1\u0101\15\0\1\u0101\155\0\1\u0102\203\0"+
    "\2\u0103\32\0\2\355\1\144\15\355\1\0\6\355\3\0"+
    "\1\355\1\0\1\355\1\0\1\355\7\0\1\357\20\0"+
    "\25\355\1\0\5\355\1\0\2\355\1\360\1\355\1\0"+
    "\5\355\11\0\1\u0104\1\0\1\u0105\3\0\1\u0106\4\0"+
    "\1\u0106\64\0\1\u0104\2\u0107\1\u0105\4\0\1\u0108\10\0"+
    "\1\u0108\31\0\1\137\2\0\1\137\146\0\1\u0109\113\0"+
    "\1\u010a\72\0\1\u010a\121\0\1\u010b\4\0\1\u010b\53\0"+
    "\1\u010c\72\0\1\u010c\30\0\2\74\1\214\15\74\1\215"+
    "\6\74\3\0\1\74\1\216\1\74\1\0\1\74\3\0"+
    "\1\137\3\0\1\76\20\0\25\74\1\215\5\74\1\0"+
    "\2\74\1\0\1\74\1\0\5\74\2\0\1\u010d\11\0"+
    "\1\u010d\147\0\1\u010e\2\0\1\u010e\120\0\1\u010f\104\0"+
    "\1\u010f\112\0\1\u0110\4\0\1\u0110\46\0\1\u0111\74\0"+
    "\2\u0112\6\0\1\u0111\47\0\2\u0113\124\0\1\u0114\72\0"+
    "\1\u0114\34\0\1\u0115\100\0\1\u0115\40\0\1\u0116\62\0"+
    "\1\u0117\4\0\1\u0117\7\0\1\u0116\27\0\2\74\1\214"+
    "\1\u0118\14\74\1\215\6\74\3\0\1\74\1\216\1\74"+
    "\1\0\1\74\7\0\1\76\20\0\25\74\1\215\5\74"+
    "\1\0\2\74\1\0\1\74\1\0\1\74\1\u0118\3\74"+
    "\2\0\1\u0119\2\0\1\u011a\5\0\1\u011b\1\u0119\1\u011c"+
    "\72\0\1\u011c\3\0\1\u011b\16\0\1\u011a\5\0\2\74"+
    "\1\214\15\74\1\215\6\74\3\0\1\74\1\216\1\74"+
    "\1\0\1\u011d\7\0\1\76\20\0\25\74\1\215\5\74"+
    "\1\0\2\74\1\0\1\74\1\0\5\74\2\0\2\74"+
    "\1\214\15\74\1\215\6\74\3\0\1\74\1\216\1\74"+
    "\1\0\1\74\1\u011e\6\0\1\76\20\0\25\74\1\215"+
    "\5\74\1\0\2\74\1\0\1\74\1\0\5\74\2\0"+
    "\2\74\1\214\1\74\1\u011f\13\74\1\215\6\74\3\0"+
    "\1\74\1\216\1\74\1\0\1\74\7\0\1\76\20\0"+
    "\16\74\1\u011f\6\74\1\215\5\74\1\0\2\74\1\0"+
    "\1\74\1\0\5\74\40\0\1\u0120\100\0\2\74\1\214"+
    "\15\74\1\215\2\74\1\u0121\2\74\1\u0121\3\0\1\74"+
    "\1\216\1\74\1\0\1\74\7\0\1\76\20\0\25\74"+
    "\1\215\5\74\1\0\2\74\1\0\1\74\1\0\5\74"+
    "\2\0\2\355\1\356\10\355\1\u0122\4\355\1\0\6\355"+
    "\3\0\1\355\1\0\1\355\1\0\1\355\7\0\1\357"+
    "\20\0\25\355\1\0\5\355\1\0\2\355\1\360\1\355"+
    "\1\0\5\355\41\0\1\137\77\0\2\74\1\214\15\74"+
    "\1\215\6\74\3\0\1\74\1\216\1\74\1\0\1\74"+
    "\7\0\1\76\20\0\14\74\2\u0123\7\74\1\215\5\74"+
    "\1\0\2\74\1\0\1\74\1\0\5\74\2\0\2\74"+
    "\1\214\15\74\1\215\6\74\3\0\1\74\1\216\1\74"+
    "\1\0\1\74\1\u0124\6\0\1\76\20\0\25\74\1\215"+
    "\5\74\1\0\2\74\1\0\1\74\1\0\5\74\2\0"+
    "\2\74\1\214\2\74\1\u0125\12\74\1\215\1\u0125\5\74"+
    "\3\0\1\74\1\216\1\74\1\0\1\74\7\0\1\76"+
    "\20\0\25\74\1\215\5\74\1\0\2\74\1\0\1\74"+
    "\1\0\5\74\1\0\137\275\1\0\2\352\1\0\1\352"+
    "\1\u0126\13\352\1\0\6\352\3\0\1\352\1\0\1\352"+
    "\1\0\1\352\7\0\1\221\20\0\25\352\1\0\5\352"+
    "\1\0\2\352\1\0\1\352\1\0\5\352\37\0\1\u0127"+
    "\102\0\1\u0128\136\0\1\156\226\0\1\u0129\4\0\1\u0129"+
    "\40\0\2\352\1\43\15\352\1\0\6\352\3\0\1\352"+
    "\1\0\1\352\1\0\1\352\2\0\2\43\3\0\1\u012a"+
    "\5\43\1\45\12\0\25\352\1\0\5\352\1\0\2\352"+
    "\1\0\1\352\1\0\5\352\37\0\1\u012b\101\0\1\u012c"+
    "\3\0\1\u012c\7\0\1\u012c\2\0\1\u012c\1\0\2\u012c"+
    "\1\0\1\u012c\1\0\1\u012c\3\0\1\u012c\35\0\6\u012c"+
    "\6\0\1\u012c\1\0\2\u012c\1\0\3\u012c\1\0\1\u012c"+
    "\10\0\1\u012c\1\0\5\u012c\40\0\1\u012d\166\0\1\312"+
    "\50\0\27\334\1\0\1\334\1\0\1\334\1\0\1\334"+
    "\1\0\2\334\6\0\1\335\1\334\2\0\1\334\4\0"+
    "\1\334\6\0\1\312\25\334\1\0\10\334\1\0\1\334"+
    "\1\0\5\334\40\0\1\u012e\107\0\1\u012f\166\0\1\u0130"+
    "\105\0\1\u0131\1\u0132\245\0\1\u0133\43\0\1\u0134\121\0"+
    "\1\u0135\137\0\1\u0136\132\0\1\311\62\0\1\312\14\0"+
    "\1\311\41\0\1\315\1\0\1\311\164\0\1\u0137\27\0"+
    "\1\312\51\0\1\322\64\0\1\312\60\0\1\u0138\127\0"+
    "\1\u0139\242\0\1\u013a\154\0\1\313\13\0\27\334\1\0"+
    "\1\334\1\0\1\334\1\0\1\334\1\0\2\334\6\0"+
    "\1\335\1\334\2\0\1\334\4\0\1\334\6\0\1\u013b"+
    "\25\334\1\0\10\334\1\0\1\334\1\0\5\334\37\0"+
    "\1\334\106\0\1\u013c\144\0\1\u013d\72\0\1\u013d\43\0"+
    "\1\u013e\72\0\1\u013e\150\0\1\u013f\13\0\1\u013f\105\0"+
    "\2\u0140\32\0\2\74\1\304\15\74\1\215\6\74\3\0"+
    "\1\74\1\216\1\74\1\0\1\74\2\0\2\43\3\0"+
    "\1\u0141\5\43\1\45\12\0\25\74\1\215\5\74\1\0"+
    "\2\74\1\0\1\74\1\0\5\74\2\0\2\74\1\214"+
    "\5\74\1\u0142\7\74\1\215\6\74\3\0\1\74\1\216"+
    "\1\74\1\0\1\74\7\0\1\76\20\0\25\74\1\215"+
    "\1\u0142\4\74\1\0\2\74\1\0\1\74\1\0\5\74"+
    "\2\0\2\74\1\214\2\74\1\u0143\12\74\1\215\1\u0143"+
    "\5\74\3\0\1\74\1\216\1\74\1\0\1\74\7\0"+
    "\1\76\20\0\25\74\1\215\5\74\1\0\2\74\1\0"+
    "\1\74\1\0\5\74\2\0\1\u0144\11\0\1\u0144\124\0"+
    "\2\u0145\1\214\15\u0145\1\215\6\u0145\3\0\1\u0145\1\216"+
    "\1\u0145\1\0\1\u0145\7\0\1\u0146\20\0\25\u0145\1\215"+
    "\5\u0145\1\0\2\u0145\1\0\1\u0145\1\0\5\u0145\2\0"+
    "\2\74\1\214\15\74\1\215\6\74\3\0\1\74\1\216"+
    "\1\74\1\0\1\74\1\u0147\6\0\1\76\20\0\25\74"+
    "\1\215\5\74\1\0\2\74\1\0\1\74\1\0\5\74"+
    "\2\0\2\355\1\0\15\355\1\0\6\355\3\0\1\355"+
    "\1\0\1\355\1\0\1\355\7\0\1\357\20\0\25\355"+
    "\1\0\5\355\1\0\2\355\1\360\1\355\1\0\5\355"+
    "\40\0\1\u0148\100\0\2\355\1\214\15\355\1\0\6\355"+
    "\3\0\1\355\1\0\1\355\1\0\1\355\7\0\1\357"+
    "\20\0\25\355\1\0\5\355\1\0\2\355\1\360\1\355"+
    "\1\0\5\355\37\0\1\355\101\0\2\u0149\1\0\15\u0149"+
    "\1\0\6\u0149\3\0\1\u0149\1\0\1\u0149\1\0\1\u0149"+
    "\7\0\1\u014a\20\0\25\u0149\1\0\5\u0149\1\0\2\u0149"+
    "\1\0\1\u0149\1\0\5\u0149\2\0\2\74\1\214\15\74"+
    "\1\215\6\74\3\0\1\74\1\216\1\74\1\0\1\74"+
    "\1\u014b\6\0\1\76\20\0\25\74\1\215\5\74\1\0"+
    "\2\74\1\0\1\74\1\0\5\74\16\0\1\u014c\1\0"+
    "\1\u014c\135\0\1\u014d\4\0\1\u014d\115\0\1\u014e\6\0"+
    "\1\u014f\6\0\1\u014e\75\0\1\u014f\27\0\1\u0150\104\0"+
    "\1\u0150\46\0\1\u0151\2\0\1\u0151\116\0\1\u0152\104\0"+
    "\1\u0152\36\0\1\u0119\72\0\1\u0119\43\0\1\u0153\72\0"+
    "\1\u0153\122\0\1\u0154\4\0\1\u0154\130\0\1\u0155\4\0"+
    "\1\u0155\53\0\1\u0156\72\0\1\u0156\43\0\1\u0157\72\0"+
    "\1\u0157\66\0\1\u0158\210\0\2\u0159\51\0\2\u015a\112\0"+
    "\1\u015b\150\0\1\u015c\72\0\1\u015c\40\0\1\u015d\104\0"+
    "\1\u015d\22\0\1\u015e\15\0\1\u015e\120\0\1\u010b\15\0"+
    "\1\u010b\213\0\1\u015d\4\0\1\u015d\43\0\1\u015f\15\0"+
    "\2\u0160\65\0\1\u015f\24\0\1\u0161\155\0\1\137\12\0"+
    "\1\140\60\0\1\137\132\0\2\u0162\51\0\2\u0163\112\0"+
    "\1\u0164\4\0\1\u0150\1\0\1\u014f\6\0\1\u0164\4\0"+
    "\2\u0165\46\0\1\u0154\4\0\1\u0154\11\0\1\u0150\1\0"+
    "\1\u014f\26\0\1\u0166\1\u0167\12\0\1\u0166\2\0\2\u0168"+
    "\65\0\1\u0167\46\0\1\u0169\2\0\1\u0169\115\0\1\u0162"+
    "\13\0\1\u0162\1\0\1\u016a\2\0\1\u016a\117\0\1\u016b"+
    "\77\0\1\u016b\53\0\2\u010b\143\0\1\u016c\3\0\1\u016c"+
    "\217\0\1\u016d\10\0\1\u016d\16\0\1\u016e\104\0\1\u016e"+
    "\24\0\1\u016f\4\0\1\u0170\77\0\2\u010b\3\0\1\u0170"+
    "\13\0\1\u016f\14\0\1\u0171\77\0\1\u0171\27\0\2\74"+
    "\1\214\4\74\1\u0172\10\74\1\215\6\74\3\0\1\74"+
    "\1\216\1\74\1\0\1\74\7\0\1\76\20\0\20\74"+
    "\1\u0172\4\74\1\215\5\74\1\0\2\74\1\0\1\74"+
    "\1\0\5\74\3\0\1\u0104\15\0\1\u0104\120\0\1\u0162"+
    "\5\0\1\u0173\7\0\1\u0162\67\0\1\u0173\37\0\1\u0174"+
    "\104\0\1\u0174\30\0\1\u0104\77\0\1\u0104\27\0\2\74"+
    "\1\214\15\74\1\215\6\74\3\0\1\74\1\216\1\74"+
    "\1\0\1\74\7\0\1\76\4\0\1\u0175\13\0\25\74"+
    "\1\215\5\74\1\0\2\74\1\0\1\74\1\0\5\74"+
    "\11\0\1\u0176\77\0\1\u0176\27\0\2\74\1\214\5\74"+
    "\1\u0177\7\74\1\215\6\74\3\0\1\74\1\216\1\74"+
    "\1\0\1\74\7\0\1\76\20\0\25\74\1\215\1\u0177"+
    "\4\74\1\0\2\74\1\0\1\74\1\0\5\74\3\0"+
    "\1\u0178\135\0\2\74\1\214\15\74\1\215\6\74\3\0"+
    "\1\74\1\216\1\74\1\0\1\74\1\u0179\6\0\1\76"+
    "\20\0\25\74\1\215\5\74\1\0\2\74\1\0\1\74"+
    "\1\0\5\74\2\0\2\355\1\217\15\355\1\0\6\355"+
    "\3\0\1\355\1\0\1\355\1\0\1\355\7\0\1\357"+
    "\20\0\25\355\1\0\5\355\1\0\2\355\1\360\1\355"+
    "\1\0\5\355\2\0\2\74\1\214\10\74\1\u017a\4\74"+
    "\1\215\6\74\3\0\1\74\1\216\1\74\1\0\1\74"+
    "\7\0\1\76\20\0\17\74\1\u017a\5\74\1\215\5\74"+
    "\1\0\2\74\1\0\1\74\1\0\5\74\74\0\1\u0104"+
    "\4\0\1\u0104\37\0\2\74\1\214\15\74\1\215\6\74"+
    "\3\0\1\74\1\216\1\74\1\0\1\74\1\u017b\6\0"+
    "\1\76\20\0\25\74\1\215\5\74\1\0\2\74\1\0"+
    "\1\74\1\0\5\74\17\0\1\u017c\131\0\1\u017d\12\0"+
    "\1\u017e\2\0\1\u017e\10\0\1\u017f\55\0\1\u017d\56\0"+
    "\1\u0180\101\0\2\223\1\304\15\223\1\0\6\223\3\0"+
    "\1\223\1\0\1\223\1\0\1\223\2\0\2\43\3\0"+
    "\1\305\5\43\1\45\4\0\1\77\5\0\25\223\1\0"+
    "\5\223\1\0\2\223\1\0\1\223\1\0\5\223\1\365"+
    "\54\0\1\u0181\122\0\1\u0182\12\0\1\311\13\0\1\312"+
    "\73\0\1\u0183\220\0\1\311\36\0\1\u0184\140\0\1\u0185"+
    "\237\0\1\311\51\0\1\311\124\0\1\u0186\143\0\1\311"+
    "\156\0\1\311\106\0\1\u0187\1\u0132\252\0\1\311\20\0"+
    "\1\u0188\252\0\1\311\23\0\1\u0189\136\0\1\u018a\104\0"+
    "\1\u018a\47\0\2\u016e\120\0\1\u018b\77\0\1\u018b\36\0"+
    "\1\u0162\10\0\1\u0162\12\0\1\u018c\53\0\1\u0162\4\0"+
    "\1\u0162\57\0\1\u018d\101\0\2\74\1\214\15\74\1\215"+
    "\6\74\3\0\1\74\1\216\1\74\1\0\1\74\1\u018e"+
    "\6\0\1\76\20\0\25\74\1\215\5\74\1\0\2\74"+
    "\1\0\1\74\1\0\5\74\2\0\2\74\1\214\15\74"+
    "\1\215\6\74\3\0\1\74\1\216\1\74\1\0\1\74"+
    "\1\u018f\6\0\1\76\20\0\25\74\1\215\5\74\1\0"+
    "\2\74\1\0\1\74\1\0\5\74\15\0\1\u0190\72\0"+
    "\1\u0190\30\0\2\u0145\1\u0191\15\u0145\1\215\6\u0145\3\0"+
    "\1\u0145\1\216\1\u0145\1\0\1\u0145\7\0\1\u0146\20\0"+
    "\25\u0145\1\215\5\u0145\1\0\2\u0145\1\0\1\u0145\1\0"+
    "\5\u0145\37\0\1\u0192\225\0\1\u0193\6\0\1\u0193\4\0"+
    "\1\u0194\135\0\2\u0149\1\u0195\15\u0149\1\0\6\u0149\3\0"+
    "\1\u0149\1\0\1\u0149\1\0\1\u0149\7\0\1\u014a\20\0"+
    "\25\u0149\1\0\5\u0149\1\0\2\u0149\1\0\1\u0149\1\0"+
    "\5\u0149\37\0\1\u0149\104\0\1\u0196\125\0\1\u0196\6\0"+
    "\1\u0197\15\0\1\u0197\54\0\1\u0197\4\0\1\u0197\74\0"+
    "\1\362\107\0\1\u0198\3\0\1\u016a\1\0\1\u016a\76\0"+
    "\1\u0198\22\0\1\u0174\15\0\1\u0174\126\0\1\u0174\77\0"+
    "\1\u0174\122\0\1\u0162\4\0\1\u0162\37\0\1\u0199\15\0"+
    "\1\u0199\125\0\1\u019a\64\0\1\u019b\4\0\1\u019b\12\0"+
    "\1\u019a\33\0\1\u0199\104\0\1\u0199\31\0\1\u019c\104\0"+
    "\1\u019c\30\0\1\u019d\77\0\1\u019d\36\0\1\u019e\77\0"+
    "\1\u019e\30\0\1\u019f\245\0\2\u01a0\64\0\1\u01a1\114\0"+
    "\1\u01a2\130\0\1\u01a3\77\0\1\u01a3\44\0\1\u0162\4\0"+
    "\1\u0162\121\0\1\u01a4\13\0\1\u01a4\124\0\1\u01a5\77\0"+
    "\1\u01a5\33\0\1\u0162\100\0\1\u0162\46\0\1\u01a6\131\0"+
    "\1\u01a7\104\0\1\u01a7\31\0\1\u0198\4\0\1\u01a8\4\0"+
    "\1\u01a8\72\0\1\u0198\31\0\1\u01a9\104\0\1\u01a9\112\0"+
    "\1\u01aa\4\0\1\u01aa\47\0\1\u01ab\77\0\1\u01ab\37\0"+
    "\1\u01ac\104\0\1\u01ac\34\0\1\u0162\72\0\1\u0162\43\0"+
    "\1\u01ad\72\0\1\u01ad\140\0\2\u01ae\57\0\1\u01af\3\0"+
    "\1\u01af\101\0\1\u01b0\4\0\1\u01b1\10\0\1\u01b0\73\0"+
    "\1\u01b1\32\0\1\u01b2\77\0\1\u01b2\42\0\1\u016e\72\0"+
    "\1\u016e\30\0\1\u01b3\4\0\1\u01b4\4\0\1\u01b3\6\0"+
    "\1\u01b4\121\0\1\u01b5\100\0\1\u01b5\31\0\2\74\1\214"+
    "\15\74\1\215\6\74\3\0\1\74\1\216\1\74\1\0"+
    "\1\74\7\0\1\76\20\0\21\74\2\u01b6\2\74\1\215"+
    "\5\74\1\0\2\74\1\0\1\74\1\0\5\74\12\0"+
    "\1\u01b7\104\0\1\u01b7\131\0\2\u010b\77\0\1\u01b8\123\0"+
    "\1\u01b9\77\0\2\74\1\214\2\74\1\u01ba\12\74\1\215"+
    "\1\u01ba\5\74\3\0\1\74\1\216\1\74\1\0\1\74"+
    "\7\0\1\76\20\0\25\74\1\215\5\74\1\0\2\74"+
    "\1\0\1\74\1\0\5\74\17\0\1\u01bb\122\0\1\u01bc"+
    "\15\0\1\u01bc\117\0\2\74\1\214\15\74\1\215\6\74"+
    "\3\0\1\74\1\216\1\74\1\0\1\74\1\u01bd\6\0"+
    "\1\76\20\0\25\74\1\215\5\74\1\0\2\74\1\0"+
    "\1\74\1\0\5\74\2\0\1\366\6\0\1\u01be\2\0"+
    "\1\366\74\0\1\u01be\64\0\1\u01bf\115\0\1\u01c0\1\0"+
    "\1\u01c0\133\0\1\u01c1\72\0\1\u01c1\45\0\1\u01c2\4\0"+
    "\1\u01c2\1\u01c3\2\0\1\u01c3\110\0\2\355\1\43\15\355"+
    "\1\0\6\355\3\0\1\355\1\0\1\355\1\0\1\355"+
    "\2\0\2\43\3\0\1\u01c4\5\43\1\45\12\0\25\355"+
    "\1\0\5\355\1\0\2\355\1\360\1\355\1\0\5\355"+
    "\1\365\106\0\1\u01c5\41\0\1\u01c6\134\0\1\u01c7\254\0"+
    "\1\u01c8\20\0\1\311\137\0\1\u01c9\135\0\1\u01ca\140\0"+
    "\1\u01cb\135\0\1\u015d\77\0\1\u015d\150\0\1\u01ae\10\0"+
    "\1\u01ae\13\0\1\u01cc\127\0\2\223\1\304\15\223\1\0"+
    "\6\223\3\0\1\223\1\0\1\223\1\0\1\223\2\0"+
    "\2\43\3\0\1\u01cd\5\43\1\45\12\0\25\223\1\0"+
    "\5\223\1\0\2\223\1\0\1\223\1\0\5\223\2\0"+
    "\1\u0144\3\0\1\u01ce\5\0\1\u0144\70\0\2\u01cf\1\u01ce"+
    "\63\0\1\u01d0\3\0\1\u01d0\101\0\1\u01d1\15\0\1\u01d1"+
    "\117\0\2\u01d2\1\0\15\u01d2\1\0\6\u01d2\3\0\1\u01d2"+
    "\1\0\1\u01d2\1\0\1\u01d2\7\0\1\u01d3\20\0\25\u01d2"+
    "\1\0\5\u01d2\1\0\2\u01d2\1\0\1\u01d2\1\0\5\u01d2"+
    "\2\0\2\u0192\1\u0191\15\u0192\1\0\6\u0192\3\0\1\u0192"+
    "\1\0\1\u0192\1\0\1\u0192\7\0\1\u0146\20\0\25\u0192"+
    "\1\0\5\u0192\1\0\2\u0192\1\0\1\u0192\1\0\5\u0192"+
    "\112\0\2\u01d4\42\0\1\u01d5\121\0\2\u01d6\1\0\15\u01d6"+
    "\1\0\6\u01d6\3\0\1\u01d6\1\0\1\u01d6\1\0\1\u01d6"+
    "\7\0\1\u01d7\20\0\25\u01d6\1\0\5\u01d6\1\0\2\u01d6"+
    "\1\0\1\u01d6\1\0\5\u01d6\3\0\1\u0162\15\0\1\u0162"+
    "\127\0\1\u01d8\104\0\1\u01d8\131\0\2\u01d9\32\0\1\u0162"+
    "\13\0\1\u0162\124\0\1\u01da\77\0\1\u01da\30\0\1\u01db"+
    "\15\0\1\u01db\133\0\1\u0169\1\0\1\u0169\130\0\1\u01dc"+
    "\104\0\1\u01dc\26\0\1\u01dd\13\0\1\u01dd\132\0\1\u01de"+
    "\127\0\1\u01df\104\0\1\u01df\147\0\1\u01e0\6\0\1\u01e0"+
    "\40\0\1\112\106\0\1\u01e1\13\0\1\u01e1\120\0\1\u0162"+
    "\125\0\1\u0162\11\0\1\u0169\100\0\1\u0169\66\0\1\120"+
    "\112\0\1\u01e2\100\0\1\u01e2\33\0\1\u01e3\77\0\1\u01e3"+
    "\33\0\1\u01e4\100\0\1\u01e4\54\0\1\u01e5\2\0\1\u01e5"+
    "\220\0\2\u01e6\36\0\1\u01e7\100\0\1\u01e7\33\0\1\u0154"+
    "\77\0\1\u0154\30\0\1\u01e8\15\0\1\u01e8\117\0\1\u016a"+
    "\11\0\1\u016a\134\0\1\u01e9\104\0\1\u01e9\31\0\1\u01a5"+
    "\104\0\1\u01a5\27\0\1\u0162\104\0\1\u0162\33\0\1\u01ea"+
    "\104\0\1\u01ea\30\0\1\u010b\77\0\1\u010b\27\0\2\74"+
    "\1\214\15\74\1\215\6\74\3\0\1\74\1\216\1\74"+
    "\1\0\1\74\1\u01eb\6\0\1\76\20\0\25\74\1\215"+
    "\5\74\1\0\2\74\1\0\1\74\1\0\5\74\7\0"+
    "\1\u01ec\13\0\1\u01ec\167\0\1\u01ed\70\0\1\u01ee\100\0"+
    "\1\u01ee\31\0\2\74\1\214\15\74\1\215\6\74\3\0"+
    "\1\74\1\216\1\74\1\0\1\74\1\u01ef\6\0\1\76"+
    "\20\0\25\74\1\215\5\74\1\0\2\74\1\0\1\74"+
    "\1\0\5\74\37\0\1\137\220\0\1\u01ae\10\0\1\u01ae"+
    "\15\0\1\u01f0\1\u01f1\76\0\1\u01f0\5\0\1\u01f1\60\0"+
    "\1\u01f2\107\0\1\u01f3\4\0\1\u01f4\4\0\1\u01f4\72\0"+
    "\1\u01f3\30\0\1\u01f5\77\0\1\u01f5\37\0\1\u01f6\104\0"+
    "\1\u01f6\116\0\1\u01f7\4\0\1\u01f7\71\0\1\u01f8\107\0"+
    "\1\u01f9\131\0\1\u0132\245\0\1\u01fa\34\0\1\u01fb\254\0"+
    "\1\u01fc\22\0\1\u01fd\131\0\1\u01fe\171\0\1\u01ff\135\0"+
    "\1\u0200\114\0\1\u0201\72\0\1\u0201\43\0\1\u0202\72\0"+
    "\1\u0202\41\0\1\u013f\100\0\1\u013f\34\0\1\u0198\104\0"+
    "\1\u0198\21\0\2\u0203\1\u0204\15\u0203\1\0\6\u0203\3\0"+
    "\1\u0203\1\0\1\u0203\1\0\1\u0203\7\0\1\u0205\20\0"+
    "\25\u0203\1\0\5\u0203\1\0\2\u0203\1\360\1\u0203\1\0"+
    "\5\u0203\37\0\1\u01d2\102\0\1\u0206\15\0\1\u0206\154\0"+
    "\1\215\136\0\1\u01d6\124\0\1\u01b3\2\0\1\u01b3\220\0"+
    "\2\u01b3\42\0\1\u0207\4\0\1\u0207\217\0\2\u0208\37\0"+
    "\1\u0209\13\0\1\u0209\152\0\1\232\102\0\1\u020a\15\0"+
    "\1\u020a\227\0\2\u020b\32\0\1\u020c\13\0\1\u020c\126\0"+
    "\1\u020d\100\0\1\u020d\40\0\1\u020e\1\0\1\u020e\126\0"+
    "\1\u020f\104\0\1\u020f\36\0\1\u0210\72\0\1\u0210\140\0"+
    "\2\u0211\36\0\1\u0212\100\0\1\u0212\41\0\1\u0213\4\0"+
    "\1\u0213\117\0\1\u0214\125\0\1\u0214\5\0\1\u0104\11\0"+
    "\1\u0104\133\0\1\u0215\77\0\1\u0215\37\0\1\u0160\104\0"+
    "\1\u0160\21\0\2\u0216\1\0\15\u0216\1\0\6\u0216\3\0"+
    "\1\u0216\1\0\1\u0216\1\0\1\u0216\7\0\1\u0217\20\0"+
    "\25\u0216\1\0\5\u0216\1\0\2\u0216\1\0\1\u0216\1\0"+
    "\5\u0216\74\0\1\u0218\4\0\1\u0218\50\0\1\u0219\100\0"+
    "\1\u0219\40\0\1\u021a\1\0\1\u021a\135\0\1\u021b\4\0"+
    "\1\u021b\217\0\2\u021c\36\0\1\u021d\100\0\1\u021d\37\0"+
    "\1\u01f7\104\0\1\u01f7\30\0\1\u01f7\13\0\1\u01f7\124\0"+
    "\1\u021e\77\0\1\u021e\27\0\2\355\1\304\15\355\1\0"+
    "\6\355\3\0\1\355\1\0\1\355\1\0\1\355\2\0"+
    "\2\43\3\0\1\u01c4\5\43\1\45\12\0\25\355\1\0"+
    "\5\355\1\0\2\355\1\360\1\355\1\0\5\355\1\365"+
    "\16\0\1\u021f\226\0\1\u0220\36\0\1\u0221\137\0\1\u0222"+
    "\133\0\1\u0132\243\0\1\u0223\27\0\1\u0224\135\0\2\223"+
    "\1\304\15\223\1\0\6\223\3\0\1\223\1\0\1\223"+
    "\1\0\1\223\2\0\2\43\3\0\1\u01cd\5\43\1\45"+
    "\12\0\25\223\1\0\5\223\1\0\2\223\1\0\1\223"+
    "\1\0\5\223\1\365\73\0\1\u020a\4\0\1\u020a\44\0"+
    "\1\u0225\13\0\1\u0225\2\0\2\u010b\111\0\2\u0203\1\u0191"+
    "\15\u0203\1\0\6\u0203\3\0\1\u0203\1\0\1\u0203\1\0"+
    "\1\u0203\7\0\1\u0205\20\0\25\u0203\1\0\5\u0203\1\0"+
    "\2\u0203\1\360\1\u0203\1\0\5\u0203\2\0\2\u0226\1\0"+
    "\15\u0226\1\0\6\u0226\3\0\1\u0226\1\0\1\u0226\1\0"+
    "\1\u0226\7\0\1\u0227\20\0\25\u0226\1\0\5\u0226\1\0"+
    "\2\u0226\1\0\1\u0226\1\0\5\u0226\37\0\1\u0203\221\0"+
    "\1\u0228\13\0\1\u0228\2\0\1\u0229\11\0\1\u0229\137\0"+
    "\1\u022a\72\0\1\u022a\133\0\2\u022b\42\0\1\u010b\104\0"+
    "\1\u010b\22\0\1\u022c\15\0\1\u022c\156\0\1\u022d\105\0"+
    "\1\u015f\104\0\1\u015f\32\0\1\u0199\77\0\1\u0199\36\0"+
    "\1\u022e\77\0\1\u022e\36\0\1\u0162\77\0\1\u0162\52\0"+
    "\1\u0210\2\0\1\u0210\116\0\1\u022f\104\0\1\u022f\31\0"+
    "\1\u01ae\104\0\1\u01ae\36\0\1\u0230\72\0\1\u0230\44\0"+
    "\1\u0231\1\0\1\u0231\120\0\2\u0216\1\u0204\15\u0216\1\0"+
    "\6\u0216\3\0\1\u0216\1\0\1\u0216\1\0\1\u0216\7\0"+
    "\1\u0217\20\0\25\u0216\1\0\5\u0216\1\0\2\u0216\1\0"+
    "\1\u0216\1\0\5\u0216\37\0\1\u0216\110\0\1\u0232\77\0"+
    "\1\u0232\35\0\1\u0233\1\0\1\u0234\61\0\1\u0235\4\0"+
    "\1\u0235\13\0\1\u0233\1\0\1\u0234\45\0\2\u0236\134\0"+
    "\1\u0236\2\0\1\u0236\123\0\1\u0237\72\0\1\u0237\140\0"+
    "\2\u01f4\31\0\1\u01f7\100\0\1\u01f7\43\0\1\u0238\173\0"+
    "\1\u0239\211\0\1\u023a\21\0\1\u023b\170\0\1\u023c\114\0"+
    "\1\u023d\212\0\1\u01ec\4\0\1\u01ec\40\0\2\u0226\1\u0204"+
    "\15\u0226\1\0\6\u0226\3\0\1\u0226\1\0\1\u0226\1\0"+
    "\1\u0226\7\0\1\u0227\20\0\25\u0226\1\0\5\u0226\1\0"+
    "\2\u0226\1\0\1\u0226\1\0\5\u0226\37\0\1\u0226\140\0"+
    "\1\u023e\106\0\1\u023f\77\0\1\u023f\120\0\1\u0230\4\0"+
    "\1\u0230\53\0\1\u01b3\72\0\1\u01b3\150\0\1\u01ae\13\0"+
    "\1\u01ae\17\0\1\u020a\4\0\1\u020a\114\0\1\u0240\11\0"+
    "\1\u0240\133\0\1\u0241\77\0\1\u0241\37\0\1\u0242\104\0"+
    "\1\u0242\30\0\1\u0243\77\0\1\u0243\34\0\1\u0244\13\0"+
    "\1\u0244\116\0\1\u0245\5\0\1\u0246\1\u015d\6\0\1\u0245"+
    "\67\0\1\u0246\2\u0247\3\0\1\u015d\22\0\1\u0248\15\0"+
    "\1\u0248\63\0\2\u0249\3\0\2\u024a\35\0\1\u0162\104\0"+
    "\1\u0162\31\0\1\u024b\104\0\1\u024b\27\0\1\252\104\0"+
    "\1\252\72\0\1\u024c\107\0\1\u024d\36\0\1\u024d\102\0"+
    "\1\u024e\235\0\1\u024f\25\0\1\u0250\162\0\1\u0162\221\0"+
    "\1\u0251\13\0\1\u0251\12\0\1\u0252\104\0\1\u0252\34\0"+
    "\1\u0211\72\0\1\u0211\44\0\1\u0253\1\0\1\u0253\131\0"+
    "\1\u0162\100\0\1\u0162\24\0\1\u0169\11\0\1\u0169\243\0"+
    "\1\u0254\10\0\1\u0254\23\0\1\u01b5\4\0\1\u01b5\137\0"+
    "\1\u0255\2\0\1\u0255\117\0\1\u01dd\61\0\1\u0199\4\0"+
    "\1\u0199\10\0\1\u01dd\43\0\1\u0255\1\0\1\u0255\133\0"+
    "\1\u0256\72\0\1\u0256\140\0\2\u0257\30\0\1\u0169\125\0"+
    "\1\u0169\25\0\1\u0258\36\0\1\u0258\67\0\1\u0259\72\0"+
    "\1\u025a\60\0\1\u025b\134\0\1\u025c\122\0\1\u025d\142\0"+
    "\1\u025e\72\0\1\u025e\133\0\2\u0169\41\0\1\u0151\77\0"+
    "\1\u0151\120\0\1\u0162\4\0\1\u0162\55\0\1\u0210\4\0"+
    "\1\u0210\131\0\1\u01b3\4\0\1\u01b3\117\0\1\u025f\2\0"+
    "\1\u0260\2\0\1\u0261\1\u0262\2\0\1\u0263\1\0\1\u0264"+
    "\3\0\1\u0265\57\0\1\u0266\4\0\1\u0267\6\0\1\u0268"+
    "\1\u0269\41\0\1\u026a\114\0\1\u026a\142\0\1\u026b\156\0"+
    "\1\u026c\221\0\1\u026d\35\0\1\u026e\77\0\1\u026e\35\0"+
    "\1\u026f\2\0\1\u0270\235\0\1\u0271\35\0\1\u0272\130\0"+
    "\1\u0273\173\0\1\u0274\111\0\1\u0275\134\0\1\u0276\137\0"+
    "\1\u0277\127\0\1\u0278\142\0\1\u0279\137\0\1\u027a\150\0"+
    "\1\311\36\0\1\311\167\0\1\200\33\0\1\u0132\134\0"+
    "\1\u027b\156\0\1\u027c\2\0\1\u027c\115\0\1\u027d\132\0"+
    "\1\u027e\140\0\1\u027f\156\0\1\u0280\223\0\1\u0281\35\0"+
    "\1\u0282\234\0\1\u0283\134\0\1\u0284\136\0\1\u0285\56\0"+
    "\1\u0286\121\0\1\u0287\141\0\1\u0288\174\0\1\u0289\126\0"+
    "\1\u028a\115\0\1\u028b\135\0\1\u028c\132\0\1\u028d\135\0"+
    "\1\u028e\151\0\1\u028f\223\0\1\u0290\65\0\1\u0291\110\0"+
    "\1\u0286\136\0\1\u0292\133\0\1\u0292\240\0\1\u0293\43\0"+
    "\1\u0294\141\0\1\u0295\36\0\1\u0295\67\0\1\u0296\104\0"+
    "\1\u0296\30\0\1\u0297\144\0\1\u0298\131\0\1\u0299\236\0"+
    "\1\u0292\35\0\1\u029a\137\0\1\u0288\243\0\1\u029b\41\0"+
    "\1\u029c\36\0\1\u029c\71\0\1\u0294\137\0\1\u0292\131\0"+
    "\1\u029d\2\0\1\u029e\105\0\1\u029f\56\0\1\u02a0\207\0"+
    "\1\u02a1\35\0\1\u02a2\144\0\1\u02a3\133\0\1\u02a4\131\0"+
    "\1\u0290\203\0\1\311\174\0\1\u026a\35\0\1\u026a\134\0"+
    "\1\u026a\145\0\1\u02a5\1\0\1\u02a5\140\0\1\u029c\16\0"+
    "\1\u02a6\17\0\1\u029c\64\0\1\u02a7\144\0\1\u02a1\146\0"+
    "\1\u02a8\121\0\1\u0111\104\0\1\u0111\46\0\1\u02a9\234\0"+
    "\1\u0292\137\0\1\u02aa\22\0\1\u02ab\140\0\1\u02ac\244\0"+
    "\1\u02ad\130\0\1\u02ae\51\0\1\u0292\232\0\1\u02af\20\0"+
    "\1\u0292\134\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[62890];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\30\1\1\11\6\1\5\0\1\1\1\0\10\1"+
    "\1\0\6\1\1\0\6\1\1\0\1\11\2\1\3\0"+
    "\6\1\1\0\5\1\2\0\3\1\1\0\10\1\1\11"+
    "\1\0\3\1\1\11\1\0\6\1\1\0\1\1\26\0"+
    "\7\1\4\0\1\1\2\0\1\1\1\0\1\1\5\0"+
    "\1\1\14\0\1\1\11\0\1\1\1\0\3\1\1\0"+
    "\1\1\2\0\4\1\11\0\1\1\2\0\1\11\30\0"+
    "\3\1\1\0\2\1\1\11\1\0\1\11\2\0\1\11"+
    "\2\0\1\1\3\0\1\11\42\0\1\1\4\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\2\1"+
    "\1\11\1\0\1\1\21\0\1\11\6\0\2\1\1\0"+
    "\1\1\34\0\1\11\17\0\1\1\4\0\1\1\2\0"+
    "\1\1\6\0\1\11\54\0\1\11\7\0\1\1\3\0"+
    "\1\1\4\0\2\1\21\0\1\1\3\0\1\1\6\0"+
    "\1\1\31\0\1\11\13\0\1\1\31\0\1\1\10\0"+
    "\1\1\1\0\1\1\12\0\1\1\13\0\1\1\5\0"+
    "\1\1\17\0\3\1\130\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[687];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

    public static final int TOKEN_WORD = 0;
    public static final int TOKEN_CHILDES = 1;
    public static final int TOKEN_ABBR = 2;
    public static final int TOKEN_CONT = 3;
    public static final int TOKEN_SPACE = 4;
    public static final int TOKEN_SYMBOL = 5;
    public static final int TOKEN_XMLENT = 6;
    public static final int TOKEN_PTAG = 7;
    public static final int TOKEN_WEBADDR = 8;
    public static final int TOKEN_DIVTAG = 9;
    public static final int TOKEN_ENGWORD = 10;
    public static final int TOKEN_MUTWORD = 11;
    public static final int TOKEN_NONSTD = 12;
    public static final int TOKEN_NOTYPO = 13;
    public static final int TOKEN_MWE = 14;
    public static final int TOKEN_MWEENG = 15;
    public static final int TOKEN_INIT = 16;
    public static final int TOKEN_NUM = 17;
    public static final int TOKEN_ITEM = 18;

    public final int yychar() {
        return yychar;
    }

    public final String getText() {
        return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public IrishTokeniserImpl(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public IrishTokeniserImpl(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 692) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int getNextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 3: 
          { return TOKEN_SPACE ;
          }
        case 20: break;
        case 10: 
          { return TOKEN_PTAG ;
          }
        case 21: break;
        case 5: 
          { return TOKEN_ITEM ;
          }
        case 22: break;
        case 15: 
          { return TOKEN_DIVTAG ;
          }
        case 23: break;
        case 2: 
          { return TOKEN_SYMBOL ;
          }
        case 24: break;
        case 18: 
          { return TOKEN_MWEENG ;
          }
        case 25: break;
        case 1: 
          { return TOKEN_WORD ;
          }
        case 26: break;
        case 19: 
          { return TOKEN_WEBADDR ;
          }
        case 27: break;
        case 7: 
          { return TOKEN_ABBR ;
          }
        case 28: break;
        case 9: 
          { return TOKEN_NUM ;
          }
        case 29: break;
        case 13: 
          { return TOKEN_XMLENT ;
          }
        case 30: break;
        case 6: 
          { return TOKEN_CONT ;
          }
        case 31: break;
        case 16: 
          { return TOKEN_MWE ;
          }
        case 32: break;
        case 14: 
          { return TOKEN_NOTYPO ;
          }
        case 33: break;
        case 12: 
          { return TOKEN_ENGWORD ;
          }
        case 34: break;
        case 8: 
          { return TOKEN_MUTWORD ;
          }
        case 35: break;
        case 11: 
          { return TOKEN_NONSTD ;
          }
        case 36: break;
        case 17: 
          { return TOKEN_CHILDES ;
          }
        case 37: break;
        case 4: 
          { return TOKEN_INIT ;
          }
        case 38: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                return -1;
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
